{"version":3,"file":"index.esm.js","sources":["../lib/schemas/config.js","../lib/logger.js","../lib/utils.js","../lib/server/rate_limit.js","../lib/fetch.js","../lib/cache.js","../lib/browser.js","../lib/export.js","../lib/benchmark.js","../templates/svg_export/svg_export.js","../lib/pool.js","../lib/server/routes/health.js","../lib/config.js","../lib/chart.js","../lib/server/routes/export.js","../lib/server/server.js","../lib/server/routes/ui.js","../lib/server/routes/change_hc_version.js","../lib/index.js"],"sourcesContent":["/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\n// Load .env into environment variables\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\n// This is the configuration object with all options and their default values,\n// also from the .env file if one exists\nexport const defaultConfig = {\n  puppeteer: {\n    args: {\n      value: [],\n      type: 'string[]',\n      description: 'Array of arguments to send to puppeteer.'\n    }\n  },\n  highcharts: {\n    version: {\n      value: 'latest',\n      envLink: 'HIGHCHARTS_VERSION',\n      type: 'string',\n      description: 'Highcharts version to use.'\n    },\n    cdnURL: {\n      value: 'https://code.highcharts.com/',\n      envLink: 'HIGHCHARTS_CDN',\n      type: 'string',\n      description: 'The CDN URL of Highcharts scripts to use.'\n    },\n    coreScripts: {\n      envLink: 'HIGHCHARTS_CORE_SCRIPTS',\n      value: ['highcharts', 'highcharts-more', 'highcharts-3d'],\n      type: 'string[]',\n      description: 'Highcharts core scripts to fetch.'\n    },\n    modules: {\n      envLink: 'HIGHCHARTS_MODULES',\n      value: [\n        'stock',\n        'map',\n        'gantt',\n        'exporting',\n        'export-data',\n        'parallel-coordinates',\n        'accessibility',\n        'annotations-advanced',\n        'boost-canvas',\n        'boost',\n        'data',\n        'draggable-points',\n        'static-scale',\n        'broken-axis',\n        'heatmap',\n        'tilemap',\n        'timeline',\n        'treemap',\n        'treegraph',\n        'item-series',\n        'drilldown',\n        'histogram-bellcurve',\n        'bullet',\n        'funnel',\n        'funnel3d',\n        'pyramid3d',\n        'networkgraph',\n        'pareto',\n        'pattern-fill',\n        'pictorial',\n        'price-indicator',\n        'sankey',\n        'arc-diagram',\n        'dependency-wheel',\n        'series-label',\n        'solid-gauge',\n        'sonification',\n        'stock-tools',\n        'streamgraph',\n        'sunburst',\n        'variable-pie',\n        'variwide',\n        'vector',\n        'venn',\n        'windbarb',\n        'wordcloud',\n        'xrange',\n        'no-data-to-display',\n        'drag-panes',\n        'debugger',\n        'dumbbell',\n        'lollipop',\n        'cylinder',\n        'organization',\n        'dotplot',\n        'marker-clusters',\n        'hollowcandlestick',\n        'heikinashi'\n      ],\n      type: 'string[]',\n      description: 'Highcharts modules to fetch.'\n    },\n    indicators: {\n      envLink: 'HIGHCHARTS_INDICATORS',\n      value: ['indicators-all'],\n      type: 'string[]',\n      description: 'Highcharts indicators to fetch.'\n    },\n    scripts: {\n      value: [\n        'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js',\n        'https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js'\n      ],\n      type: 'string[]',\n      description:\n        'Additional direct scripts/optional dependencies (e.g. moment.js).'\n    },\n    forceFetch: {\n      envLink: 'HIGHCHARTS_FORCE_FETCH',\n      value: false,\n      type: 'boolean',\n      description:\n        'Should all the scripts be refetched after rerunning the server.'\n    }\n  },\n  export: {\n    infile: {\n      value: false,\n      type: 'string',\n      description:\n        'The input file name along with a type (json or svg). It can be a correct JSON or SVG file.'\n    },\n    instr: {\n      value: false,\n      type: 'string',\n      description:\n        'An input in a form of a stringified JSON or SVG file. Overrides the --infile.'\n    },\n    options: {\n      value: false,\n      type: 'string',\n      description: 'An alias for the --instr option.'\n    },\n    outfile: {\n      value: false,\n      type: 'string',\n      description:\n        'The output filename along with a type (jpeg, png, pdf or svg). Ignores the --type flag.'\n    },\n    type: {\n      envLink: 'EXPORT_DEFAULT_TYPE',\n      value: 'png',\n      type: 'string',\n      description:\n        'The format of the file to export to. Can be jpeg, png, pdf or svg.'\n    },\n    constr: {\n      envLink: 'EXPORT_DEFAULT_CONSTR',\n      value: 'chart',\n      type: 'string',\n      description:\n        'The constructor to use. Can be chart, stockChart, mapChart or ganttChart.'\n    },\n    defaultHeight: {\n      envLink: 'EXPORT_DEFAULT_HEIGHT',\n      value: 400,\n      type: 'number',\n      description:\n        'The default height of the exported chart. Used when not found any value set.'\n    },\n    defaultWidth: {\n      envLink: 'EXPORT_DEFAULT_WIDTH',\n      value: 600,\n      type: 'number',\n      description:\n        'The default width of the exported chart. Used when not found any value set.'\n    },\n    defaultScale: {\n      envLink: 'EXPORT_DEFAULT_SCALE',\n      value: 1,\n      type: 'number',\n      description:\n        'The default scale of the exported chart. Ranges between 1 and 5.'\n    },\n    height: {\n      type: 'number',\n      value: false,\n      description:\n        'The default height of the exported chart. Overrides the option in the chart settings.'\n    },\n    width: {\n      type: 'number',\n      value: false,\n      description:\n        'The width of the exported chart. Overrides the option in the chart settings.'\n    },\n    scale: {\n      value: false,\n      type: 'number',\n      description: 'The scale of the exported chart. Ranges between 1 and 5.'\n    },\n    globalOptions: {\n      value: false,\n      type: 'string',\n      description:\n        'A stringified JSON or a filename with options to be passed into the Highcharts.setOptions.'\n    },\n    themeOptions: {\n      value: false,\n      type: 'string',\n      description:\n        'A stringified JSON or a filename with theme options to be passed into the Highcharts.setOptions.'\n    },\n    batch: {\n      value: false,\n      type: 'string',\n      description:\n        'Starts a batch job. A string that contains input/output pairs: \"in=out;in=out;..\".'\n    },\n    rasterizationTimeout: {\n      envLink: 'EXPORT_RASTERIZATION_TIMEOUT',\n      value: 1500,\n      type: 'number',\n      description: 'The number of milliseconds to wait for rendering a webpage.'\n    }\n  },\n  customCode: {\n    allowCodeExecution: {\n      envLink: 'HIGHCHARTS_ALLOW_CODE_EXECUTION',\n      value: false,\n      type: 'boolean',\n      description:\n        'If set to true, allow for the execution of arbitrary code when exporting.'\n    },\n    allowFileResources: {\n      envLink: 'HIGHCHARTS_ALLOW_FILE_RESOURCES',\n      value: true,\n      type: 'boolean',\n      description:\n        'Allow injecting resources from the filesystem. Has no effect when running as a server.'\n    },\n    customCode: {\n      value: false,\n      type: 'string',\n      description:\n        'A function to be called before chart initialization. Can be a filename with the js extension.'\n    },\n    callback: {\n      value: false,\n      type: 'string',\n      description: 'A JavaScript file with a function to run on construction.'\n    },\n    resources: {\n      value: false,\n      type: 'string',\n      description:\n        'An additional resource in a form of stringified JSON. It can contain files, js and css sections.'\n    },\n    loadConfig: {\n      value: false,\n      type: 'string',\n      description: 'A file that contains a pre-defined config to use.'\n    },\n    createConfig: {\n      value: false,\n      type: 'string',\n      description:\n        'Allows to set options through a prompt and save in a provided config file.'\n    }\n  },\n  server: {\n    enable: {\n      envLink: 'HIGHCHARTS_SERVER_ENABLE',\n      value: false,\n      type: 'boolean',\n      cliName: 'enableServer',\n      description: 'If set to true, starts a server on 0.0.0.0.'\n    },\n    host: {\n      envLink: 'HIGHCHARTS_SERVER_HOST',\n      value: '0.0.0.0',\n      type: 'string',\n      description:\n        'The hostname of the server. Also starts a server listening on the supplied hostname.'\n    },\n    port: {\n      envLink: 'HIGHCHARTS_SERVER_PORT',\n      value: 7801,\n      type: 'number',\n      description: 'The port to use for the server. Defaults to 7801.'\n    },\n    ssl: {\n      enable: {\n        envLink: 'HIGHCHARTS_SERVER_SSL_ENABLE',\n        value: false,\n        type: 'boolean',\n        cliName: 'enableSsl',\n        description: 'Enables the SSL protocol.'\n      },\n      force: {\n        envLink: 'HIGHCHARTS_SERVER_SSL_FORCE',\n        value: false,\n        type: 'boolean',\n        cliName: 'sslForced',\n        description:\n          'If set to true, forces the server to only serve over HTTPS.'\n      },\n      port: {\n        envLink: 'HIGHCHARTS_SERVER_SSL_PORT',\n        value: 443,\n        type: 'number',\n        cliName: 'sslPort',\n        description: 'The port on which to run the SSL server.'\n      },\n      certPath: {\n        envLink: 'HIGHCHARTS_SSL_CERT_PATH',\n        value: '',\n        type: 'string',\n        description: 'The path to the SSL certificate/key.'\n      }\n    },\n    rateLimiting: {\n      enable: {\n        envLink: 'HIGHCHARTS_RATE_LIMIT_ENABLE',\n        value: false,\n        type: 'boolean',\n        cliName: 'enableRateLimiting',\n        description: 'Enables rate limiting.'\n      },\n      maxRequests: {\n        envLink: 'HIGHCHARTS_RATE_LIMIT_MAX',\n        value: 10,\n        type: 'number',\n        description: 'Max requests allowed in a one minute.'\n      },\n      window: {\n        envLink: 'HIGHCHARTS_RATE_LIMIT_WINDOW',\n        value: 1,\n        type: 'number',\n        description: 'The time window in minutes for rate limiting.'\n      },\n      delay: {\n        envLink: 'HIGHCHARTS_RATE_LIMIT_DELAY',\n        value: 0,\n        type: 'number',\n        description:\n          'The amount to delay each successive request before hitting the max.'\n      },\n      trustProxy: {\n        envLink: 'HIGHCHARTS_RATE_LIMIT_TRUST_PROXY',\n        value: false,\n        type: 'boolean',\n        description: 'Set this to true if behind a load balancer.'\n      },\n      skipKey: {\n        envLink: 'HIGHCHARTS_RATE_LIMIT_SKIP_KEY',\n        value: '',\n        type: 'number|string',\n        description:\n          'Allows bypassing the rate limiter and should be provided with skipToken argument.'\n      },\n      skipToken: {\n        envLink: 'HIGHCHARTS_RATE_LIMIT_SKIP_TOKEN',\n        value: '',\n        type: 'number|string',\n        description:\n          'Allows bypassing the rate limiter and should be provided with skipKey argument.'\n      }\n    }\n  },\n  pool: {\n    minWorkers: {\n      envLink: 'HIGHCHARTS_POOL_MIN_WORKERS',\n      value: 4,\n      type: 'number',\n      description: 'The number of initial workers to spawn.'\n    },\n    maxWorkers: {\n      envLink: 'HIGHCHARTS_POOL_MAX_WORKERS',\n      value: 8,\n      type: 'number',\n      description: 'The number of max workers to spawn.'\n    },\n    workLimit: {\n      envLink: 'HIGHCHARTS_POOL_WORK_LIMIT',\n      value: 40,\n      type: 'number',\n      description:\n        'The pieces of work that can be performed before restarting process.'\n    },\n    acquireTimeout: {\n      envLink: 'HIGHCHARTS_POOL_ACQUIRE_TIMEOUT',\n      value: 5000,\n      type: 'number',\n      description:\n        'The number of milliseconds to wait for acquiring a resource.'\n    },\n    createTimeout: {\n      envLink: 'HIGHCHARTS_POOL_CREATE_TIMEOUT',\n      value: 5000,\n      type: 'number',\n      description: 'The number of milliseconds to wait for creating a resource.'\n    },\n    destroyTimeout: {\n      envLink: 'HIGHCHARTS_POOL_DESTROY_TIMEOUT',\n      value: 5000,\n      type: 'number',\n      description:\n        'The number of milliseconds to wait for destroying a resource.'\n    },\n    idleTimeout: {\n      envLink: 'HIGHCHARTS_POOL_IDLE_TIMEOUT',\n      value: 30000,\n      type: 'number',\n      description:\n        'The number of milliseconds after an idle resource is destroyed.'\n    },\n    createRetryInterval: {\n      envLink: 'HIGHCHARTS_POOL_CREATE_RETRY_INTERVAL',\n      value: 200,\n      type: 'number',\n      description:\n        'The number of milliseconds after the create process is retried in case of fail.'\n    },\n    reaperInterval: {\n      envLink: 'HIGHCHARTS_POOL_REAPER_INTERVAL',\n      value: 1000,\n      type: 'number',\n      description:\n        'The number of milliseconds after the check for idle resources to destroy is triggered.'\n    },\n    benchmarking: {\n      envLink: 'HIGHCHARTS_POOL_BENCHMARKING',\n      value: false,\n      type: 'boolean',\n      description: 'Enable benchmarking.'\n    },\n    listenToProcessExits: {\n      envLink: 'HIGHCHARTS_POOL_LISTEN_TO_PROCESS_EXITS',\n      value: true,\n      type: 'boolean',\n      description:\n        'Set to false in order to skip attaching process.exit handlers.'\n    }\n  },\n  logging: {\n    level: {\n      envLink: 'HIGHCHARTS_LOG_LEVEL',\n      value: 4,\n      type: 'number',\n      cliName: 'logLevel',\n      description:\n        'The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose).'\n    },\n    file: {\n      envLink: 'HIGHCHARTS_LOG_FILE',\n      value: 'highcharts-export-server.log',\n      type: 'string',\n      cliName: 'logFile',\n      description:\n        'A name of a log file. The --logDest also needs to be set to enable file logging.'\n    },\n    dest: {\n      envLink: 'HIGHCHARTS_LOG_DEST',\n      value: 'log/',\n      type: 'string',\n      cliName: 'logDest',\n      description: 'The path to store log files. Also enables file logging.'\n    }\n  },\n  ui: {\n    enable: {\n      envLink: 'HIGHCHARTS_UI_ENABLE',\n      value: false,\n      type: 'boolean',\n      cliName: 'enableUi',\n      description: 'Enables the UI for the export server.'\n    },\n    route: {\n      envLink: 'HIGHCHARTS_UI_ROUTE',\n      value: '/',\n      type: 'string',\n      cliName: 'uiRoute',\n      description: 'The route to attach the UI to.'\n    }\n  },\n  other: {\n    noLogo: {\n      envLink: 'HIGHCHARTS_NO_LOGO',\n      value: false,\n      type: 'boolean',\n      description:\n        'Skip printing the logo on a startup. Will be replaced by a simple text.'\n    }\n  },\n  payload: {}\n};\n\n// The config descriptions object for the prompts functionality. It contains\n// information like:\n// * Type of a prompt\n// * Name of an option\n// * Short description of a chosen option\n// * Initial value\nexport const promptsConfig = {\n  puppeteer: [\n    {\n      type: 'list',\n      name: 'args',\n      message: 'Puppeteer arguments',\n      initial: defaultConfig.puppeteer.args.value.join(','),\n      separator: ','\n    }\n  ],\n  highcharts: [\n    {\n      type: 'text',\n      name: 'version',\n      message: 'Highcharts version',\n      initial: defaultConfig.highcharts.version.value\n    },\n    {\n      type: 'text',\n      name: 'cdnURL',\n      message: 'The url of CDN',\n      initial: defaultConfig.highcharts.cdnURL.value\n    },\n    {\n      type: 'multiselect',\n      name: 'modules',\n      message: 'Available modules',\n      instructions: 'Space: Select specific, A: Select all, Enter: Confirm.',\n      choices: defaultConfig.highcharts.modules.value\n    },\n    {\n      type: 'list',\n      name: 'scripts',\n      message: 'Custom scripts',\n      initial: defaultConfig.highcharts.scripts.value.join(','),\n      separator: ','\n    },\n    {\n      type: 'toggle',\n      name: 'forceFetch',\n      message: 'Should refetch all the scripts after each server rerun',\n      initial: defaultConfig.highcharts.forceFetch.value\n    }\n  ],\n  export: [\n    {\n      type: 'select',\n      name: 'type',\n      message: 'The default type of a file to export to',\n      hint: `Default: ${defaultConfig.export.type.value}`,\n      initial: 0,\n      choices: ['png', 'jpeg', 'pdf', 'svg']\n    },\n    {\n      type: 'select',\n      name: 'constr',\n      message: 'The default constructor for Highcharts to use',\n      hint: `Default: ${defaultConfig.export.constr.value}`,\n      initial: 0,\n      choices: ['chart', 'stockChart', 'mapChart', 'ganttChart']\n    },\n    {\n      type: 'number',\n      name: 'defaultHeight',\n      message: 'The default fallback height of the exported chart',\n      initial: defaultConfig.export.defaultHeight.value\n    },\n    {\n      type: 'number',\n      name: 'defaultWidth',\n      message: 'The default fallback width of the exported chart',\n      initial: defaultConfig.export.defaultWidth.value\n    },\n    {\n      type: 'number',\n      name: 'defaultScale',\n      message: 'The default fallback scale of the exported chart',\n      initial: defaultConfig.export.defaultScale.value,\n      min: 0.1,\n      max: 5\n    },\n    {\n      type: 'number',\n      name: 'rasterizationTimeout',\n      message: 'The number of milliseconds to wait for rendering a webpage',\n      initial: defaultConfig.export.rasterizationTimeout.value\n    }\n  ],\n  customCode: [\n    {\n      type: 'toggle',\n      name: 'allowCodeExecution',\n      message: 'Allow to execute custom code',\n      initial: defaultConfig.customCode.allowCodeExecution.value\n    },\n    {\n      type: 'toggle',\n      name: 'allowFileResources',\n      message: 'Allow file resources',\n      initial: defaultConfig.customCode.allowFileResources.value\n    }\n  ],\n  server: [\n    {\n      type: 'toggle',\n      name: 'enable',\n      message: 'Starts a server on 0.0.0.0',\n      initial: defaultConfig.server.enable.value\n    },\n    {\n      type: 'text',\n      name: 'host',\n      message: 'A hostname of a server',\n      initial: defaultConfig.server.host.value\n    },\n    {\n      type: 'number',\n      name: 'port',\n      message: 'A port of a server',\n      initial: defaultConfig.server.port.value\n    },\n    {\n      type: 'toggle',\n      name: 'ssl.enable',\n      message: 'Enable SSL protocol',\n      initial: defaultConfig.server.ssl.enable.value\n    },\n    {\n      type: 'toggle',\n      name: 'ssl.force',\n      message: 'Force to only serve over HTTPS',\n      initial: defaultConfig.server.ssl.force.value\n    },\n    {\n      type: 'number',\n      name: 'ssl.port',\n      message: 'Port on which to run the SSL server',\n      initial: defaultConfig.server.ssl.port.value\n    },\n    {\n      type: 'text',\n      name: 'ssl.certPath',\n      message: 'A path where to find the SSL certificate/key',\n      initial: defaultConfig.server.ssl.certPath.value\n    },\n    {\n      type: 'toggle',\n      name: 'rateLimiting.enable',\n      message: 'Enable rate limiting',\n      initial: defaultConfig.server.rateLimiting.enable.value\n    },\n    {\n      type: 'number',\n      name: 'rateLimiting.maxRequests',\n      message: 'Max requests allowed in a one minute',\n      initial: defaultConfig.server.rateLimiting.maxRequests.value\n    },\n    {\n      type: 'number',\n      name: 'rateLimiting.window',\n      message: 'The time window in minutes for rate limiting',\n      initial: defaultConfig.server.rateLimiting.window.value\n    },\n    {\n      type: 'number',\n      name: 'rateLimiting.delay',\n      message:\n        'The amount to delay each successive request before hitting the max',\n      initial: defaultConfig.server.rateLimiting.delay.value\n    },\n    {\n      type: 'toggle',\n      name: 'rateLimiting.trustProxy',\n      message: 'Set this to true if behind a load balancer',\n      initial: defaultConfig.server.rateLimiting.trustProxy.value\n    },\n    {\n      type: 'text',\n      name: 'rateLimiting.skipKey',\n      message:\n        'Allows bypassing the rate limiter and should be provided with skipToken argument',\n      initial: defaultConfig.server.rateLimiting.skipKey.value\n    },\n    {\n      type: 'text',\n      name: 'rateLimiting.skipToken',\n      message:\n        'Allows bypassing the rate limiter and should be provided with skipKey argument',\n      initial: defaultConfig.server.rateLimiting.skipToken.value\n    }\n  ],\n  pool: [\n    {\n      type: 'number',\n      name: 'minWorkers',\n      message: 'The number of initial workers to spawn',\n      initial: defaultConfig.pool.minWorkers.value\n    },\n    {\n      type: 'number',\n      name: 'maxWorkers',\n      message: 'The number of max workers to spawn',\n      initial: defaultConfig.pool.maxWorkers.value\n    },\n    {\n      type: 'number',\n      name: 'workLimit',\n      message:\n        'The pieces of work that can be performed before restarting a puppeteer process',\n      initial: defaultConfig.pool.workLimit.value\n    },\n    {\n      type: 'number',\n      name: 'acquireTimeout',\n      message: 'The number of milliseconds to wait for acquiring a resource',\n      initial: defaultConfig.pool.acquireTimeout.value\n    },\n    {\n      type: 'number',\n      name: 'createTimeout',\n      message: 'The number of milliseconds to wait for creating a resource',\n      initial: defaultConfig.pool.createTimeout.value\n    },\n    {\n      type: 'number',\n      name: 'destroyTimeout',\n      message: 'The number of milliseconds to wait for destroying a resource',\n      initial: defaultConfig.pool.destroyTimeout.value\n    },\n    {\n      type: 'number',\n      name: 'idleTimeout',\n      message: 'The number of milliseconds after an idle resource is destroyed',\n      initial: defaultConfig.pool.idleTimeout.value\n    },\n    {\n      type: 'number',\n      name: 'createRetryInterval',\n      message:\n        'The number of milliseconds after the create process is retried in case of fail',\n      initial: defaultConfig.pool.createRetryInterval.value\n    },\n    {\n      type: 'number',\n      name: 'reaperInterval',\n      message:\n        'The number of milliseconds after the check for idle resources to destroy is triggered',\n      initial: defaultConfig.pool.reaperInterval.value\n    },\n    {\n      type: 'toggle',\n      name: 'benchmarking',\n      message: 'Set benchmarking',\n      initial: defaultConfig.pool.benchmarking.value\n    },\n    {\n      type: 'toggle',\n      name: 'listenToProcessExits',\n      message: 'Set to false in order to skip attaching process.exit handlers',\n      initial: defaultConfig.pool.listenToProcessExits.value\n    }\n  ],\n  logging: [\n    {\n      type: 'number',\n      name: 'level',\n      message:\n        'The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose)',\n      initial: defaultConfig.logging.level.value,\n      round: 0,\n      min: 0,\n      max: 4\n    },\n    {\n      type: 'text',\n      name: 'file',\n      message:\n        'A name of a log file. The --logDest also needs to be set to enable file logging',\n      initial: defaultConfig.logging.file.value\n    },\n    {\n      type: 'text',\n      name: 'dest',\n      message: 'A path to log files. It enables file logging',\n      initial: defaultConfig.logging.dest.value\n    }\n  ],\n  ui: [\n    {\n      type: 'toggle',\n      name: 'enable',\n      message: 'Enable UI for the export server',\n      initial: defaultConfig.ui.enable.value\n    },\n    {\n      type: 'text',\n      name: 'route',\n      message: 'A route to attach the UI to',\n      initial: defaultConfig.ui.route.value\n    }\n  ],\n  other: [\n    {\n      type: 'toggle',\n      name: 'noLogo',\n      message:\n        'Skip printing the logo on a startup. Will be replaced by a simple text',\n      initial: defaultConfig.other.noLogo.value\n    }\n  ]\n};\n\n// Absolute props that, in case of merging recursively, need to be force merged\nexport const absoluteProps = [\n  'options',\n  'globalOptions',\n  'themeOptions',\n  'resources',\n  'payload'\n];\n\n// Argument nesting level of all export server options\nexport const nestedArgs = {};\n\n/**\n * Creates nested arguments chain for all options\n *\n * @param {object} obj - The object based on which the initial configuration be\n * made.\n * @param {string } propChain - Required for creating a string chain of\n * properties for nested arguments.\n */\nconst createNestedArgs = (obj, propChain = '') => {\n  Object.keys(obj).forEach((k) => {\n    if (!['puppeteer', 'highcharts'].includes(k)) {\n      const entry = obj[k];\n      if (typeof entry.value === 'undefined') {\n        // Go deeper in the nested arguments\n        createNestedArgs(entry, `${propChain}.${k}`);\n      } else {\n        // Create the chain of nested arguments\n        nestedArgs[entry.cliName || k] = `${propChain}.${k}`.substring(1);\n      }\n    }\n  });\n};\n\ncreateNestedArgs(defaultConfig);\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { appendFile, existsSync, mkdirSync } from 'fs';\n\nimport { defaultConfig } from './schemas/config.js';\n\n// The default logging config\nlet logging = {\n  // Flags for logging status\n  toConsole: true,\n  toFile: false,\n  pathCreated: false,\n  // Log levels\n  levelsDesc: [\n    {\n      title: 'error',\n      color: 'red'\n    },\n    {\n      title: 'warning',\n      color: 'yellow'\n    },\n    {\n      title: 'notice',\n      color: 'blue'\n    },\n    {\n      title: 'verbose',\n      color: 'gray'\n    }\n  ],\n  // Log listeners\n  listeners: []\n};\n\n// Gather init logging options\nfor (const [key, option] of Object.entries(defaultConfig.logging)) {\n  logging[key] = option.value;\n}\n\n/**\n * Logs a message. Accepts a variable amount of arguments. Arguments after\n * `level` will be passed directly to console.log, and/or will be joined\n * and appended to the log file.\n *\n * @param {any} args - An array of arguments where the first is the log level\n * and the rest are strings to build a message with.\n */\nexport const log = (...args) => {\n  const [newLevel, ...texts] = args;\n\n  // Current logging options\n  const { level, levelsDesc } = logging;\n\n  // Check if log level is within a correct range\n  if (newLevel === 0 || newLevel > level || level > levelsDesc.length) {\n    return;\n  }\n\n  // Get rid of the GMT text information\n  const newDate = new Date().toString().split('(')[0].trim();\n\n  // Create a message's prefix\n  const prefix = `${newDate} [${levelsDesc[newLevel - 1].title}] -`;\n\n  // Call available log listeners\n  logging.listeners.forEach((fn) => {\n    fn(prefix, texts.join(' '));\n  });\n\n  // Log to file\n  if (logging.toFile) {\n    if (!logging.pathCreated) {\n      // Create if does not exist\n      !existsSync(logging.dest) && mkdirSync(logging.dest);\n\n      // We now assume the path is available, e.g. it's the responsibility\n      // of the user to create the path with the correct access rights.\n      logging.pathCreated = true;\n    }\n\n    // Add the content to a file\n    appendFile(\n      `${logging.dest}${logging.file}`,\n      [prefix].concat(texts).join(' ') + '\\n',\n      (error) => {\n        if (error) {\n          console.log(`[logger] Unable to write to log file: ${error}`);\n          logging.toFile = false;\n        }\n      }\n    );\n  }\n\n  // Log to console\n  if (logging.toConsole) {\n    console.log.apply(\n      undefined,\n      [prefix.toString()[logging.levelsDesc[newLevel - 1].color]].concat(texts)\n    );\n  }\n};\n\n/**\n * Sets the file logging configuration.\n *\n * @param {string} logDest - A path to log to.\n * @param {string} logFile - The name of the log file.\n */\nexport const enableFileLogging = (logDest, logFile) => {\n  // Update logging options\n  logging = {\n    ...logging,\n    dest: logDest || logging.dest,\n    file: logFile || logging.file,\n    toFile: true\n  };\n\n  if (logging.dest.length === 0) {\n    return log(1, '[logger] File logging init: no path supplied.');\n  }\n\n  if (!logging.dest.endsWith('/')) {\n    logging.dest += '/';\n  }\n};\n\n/**\n * Adds a log listener.\n *\n * @param {function} fn - The function to call when getting a log event.\n */\nexport const listen = (fn) => {\n  logging.listeners.push(fn);\n};\n\n/**\n * Sets the current log level. Log levels are:\n * - 0 = no logging\n * - 1 = error\n * - 2 = warning\n * - 3 = notice\n * - 4 = verbose\n *\n * @param {number} newLevel - The new log level (0 - 4).\n */\nexport const setLogLevel = (newLevel) => {\n  if (newLevel >= 0 && newLevel <= logging.levelsDesc.length) {\n    logging.level = newLevel;\n  }\n};\n\n/**\n * Enables or disables logging to the stdout.\n *\n * @param {boolean} enabled - Whether log to console or not.\n */\nexport const toggleSTDOut = (enabled) => {\n  logging.toConsole = enabled;\n};\n\nexport default {\n  log,\n  enableFileLogging,\n  listen,\n  setLogLevel,\n  toggleSTDOut\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { readFileSync } from 'fs';\nimport { fileURLToPath } from 'url';\nimport { join as pather } from 'path';\n\nimport { defaultConfig } from '../lib/schemas/config.js';\nimport { log } from './logger.js';\n\nconst MAX_BACKOFF_ATTEMPTS = 6;\n\nexport const __dirname = fileURLToPath(new URL('../.', import.meta.url));\n\n/**\n * Clears text from whitespaces with a regex rule.\n *\n * @param {string} rule - The rule for clearing a string, default to /\\s\\s+/g.\n * @return {string} - Cleared text.\n */\nexport const clearText = (text, rule = /\\s\\s+/g, replacer = ' ') =>\n  text.replaceAll(rule, replacer).trim();\n\n/**\n * Delays calling the function by time calculated based on the backoff\n * algorithm.\n *\n * @param {function} fn - A function to try to call with the backoff algorithm\n * on.\n * @param {number} attempt - The number of an attempt, where the first one is 0.\n */\nexport const expBackoff = async (fn, attempt = 0, ...args) => {\n  try {\n    // Try to call the function\n    return await fn(...args);\n  } catch (error) {\n    // Calculate delay in ms\n    const delayInMs = 2 ** attempt * 1000;\n\n    // If the attempt exceeds the maximum attempts of reapeat, throw an error\n    if (++attempt >= MAX_BACKOFF_ATTEMPTS) {\n      throw error;\n    }\n\n    // Wait given amount of time\n    await new Promise((response) => setTimeout(response, delayInMs));\n    log(\n      3,\n      `[pool] Waited ${delayInMs}ms until next call for the resource id: ${args[0]}.`\n    );\n\n    // Try again\n    return expBackoff(fn, attempt, ...args);\n  }\n};\n\n/**\n * Fixes to supported type format if MIME.\n *\n * @param {string} type - Type to be corrected.\n * @param {string} outfile - Name of the outfile.\n */\nexport const fixType = (type, outfile) => {\n  // MIME types\n  const mimeTypes = {\n    'image/png': 'png',\n    'image/jpeg': 'jpeg',\n    'application/pdf': 'pdf',\n    'image/svg+xml': 'svg'\n  };\n\n  // Formats\n  const formats = ['png', 'jpeg', 'pdf', 'svg'];\n\n  // Check if type and outfile's extensions are the same\n  if (outfile) {\n    const outType = outfile.split('.').pop();\n\n    // Check if extension has a correct type\n    if (formats.includes(outType) && type !== outType) {\n      type = outType;\n    }\n  }\n\n  // Return a correct type\n  return mimeTypes[type] || formats.find((t) => t === type) || 'png';\n};\n\n/**\n * Handles the provided resources.\n *\n * @param {string} resources - The stringified resources.\n * @param {string} allowFileResources - Decide if resources from file are\n * allowed.\n */\nexport const handleResources = (resources = false, allowFileResources) => {\n  const allowedProps = ['js', 'css', 'files'];\n\n  let handledResources = resources;\n  let correctResources = false;\n\n  // Try to load resources from a file\n  if (allowFileResources && resources.endsWith('.json')) {\n    try {\n      if (!resources) {\n        handledResources = isCorrectJSON(\n          readFileSync('resources.json', 'utf8')\n        );\n      } else if (resources && resources.endsWith('.json')) {\n        handledResources = isCorrectJSON(readFileSync(resources, 'utf8'));\n      } else {\n        handledResources = isCorrectJSON(resources);\n        if (handledResources === true) {\n          handledResources = isCorrectJSON(\n            readFileSync('resources.json', 'utf8')\n          );\n        }\n      }\n    } catch (notice) {\n      return log(3, `[cli] No resources found.`);\n    }\n  } else {\n    // Try to get JSON\n    handledResources = isCorrectJSON(resources);\n\n    // Get rid of the files section\n    if (!allowFileResources) {\n      delete handledResources.files;\n    }\n  }\n\n  // Filter from unnecessary properties\n  for (const propName in handledResources) {\n    if (!allowedProps.includes(propName)) {\n      delete handledResources[propName];\n    } else if (!correctResources) {\n      correctResources = true;\n    }\n  }\n\n  // Check if at least one of allowed properties is present\n  if (!correctResources) {\n    return log(3, `[cli] No resources found.`);\n  }\n\n  // Handle files section\n  if (handledResources.files) {\n    handledResources.files = handledResources.files.map((item) => item.trim());\n    if (!handledResources.files || handledResources.files.length <= 0) {\n      delete handledResources.files;\n    }\n  }\n\n  // Return resources\n  return handledResources;\n};\n\n/**\n * Checks if provided data is or can be a correct JSON.\n *\n * @param {any} data - Data to be checked.\n * @param {boolean} toString - If true, return stringified representation.\n */\nexport function isCorrectJSON(data, toString) {\n  try {\n    // Get the string representation if not already before parsing\n    const parsedData = JSON.parse(\n      typeof data !== 'string' ? JSON.stringify(data) : data\n    );\n\n    // Return a stringified representation of a JSON if required\n    if (typeof parsedData !== 'string' && toString) {\n      return JSON.stringify(parsedData);\n    }\n\n    // Return a JSON\n    return parsedData;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Checks if item is an object.\n *\n * @param {any} item - Item to be checked.\n */\nexport const isObject = (item) =>\n  typeof item === 'object' && !Array.isArray(item) && item !== null;\n\n/**\n * Checks if string contains private range urls.\n *\n * @export utils\n * @param item {string} item to be checked\n */\nexport const isPrivateRangeUrlFound = (item) => {\n  return [\n    'localhost',\n    '(10).(.*).(.*).(.*)',\n    '(127).(.*).(.*).(.*)',\n    '(172).(1[6-9]|2[0-9]|3[0-1]).(.*).(.*)',\n    '(192).(168).(.*).(.*)'\n  ].some((ipRegEx) =>\n    item.match(`xlink:href=\"(?:(http://|https://))?${ipRegEx}`)\n  );\n};\n\n/**\n * Creates and returns a deep copy of the given object.\n *\n * @param {object} object - Object to copy.\n * @return {object} - Deep copy of the object.\n */\nexport const deepCopy = (obj) => {\n  if (obj === null || typeof obj !== 'object') {\n    return obj;\n  }\n\n  const copy = Array.isArray(obj) ? [] : {};\n\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      copy[key] = deepCopy(obj[key]);\n    }\n  }\n\n  return copy;\n};\n\n/**\n * Stringifies object with options. Possible to preserve functions with\n * allowFunctions flag.\n *\n * @param {object} options - Options to stringify.\n * @param {boolean} allowFunctions - Flag for keeping functions.\n */\nexport const optionsStringify = (options, allowFunctions) => {\n  const replacerCallback = (name, value) => {\n    if (typeof value === 'string') {\n      value = value.trim();\n\n      // If allowFunctions is set to true, preserve functions\n      if (\n        (value.startsWith('function(') || value.startsWith('function (')) &&\n        value.endsWith('}')\n      ) {\n        value = allowFunctions\n          ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\n          : undefined;\n      }\n    }\n\n    return typeof value === 'function'\n      ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\n      : value;\n  };\n\n  // Stringify options and if required, replace special functions marks\n  return JSON.stringify(options, replacerCallback).replaceAll(\n    /\"EXP_FUN|EXP_FUN\"/g,\n    ''\n  );\n};\n\n/**\n * Prints the export server logo.\n *\n * @param {boolean} noLogo - Whether to display logo or text.\n */\nexport const printLogo = (noLogo) => {\n  // Get package version either from env or from package.json\n  const packageVersion = JSON.parse(\n    readFileSync(pather(__dirname, 'package.json'))\n  ).version;\n\n  // Print text only\n  if (noLogo) {\n    console.log(`Starting highcharts export server v${packageVersion}...`);\n    return;\n  }\n\n  // Print the logo\n  console.log(\n    readFileSync(__dirname + '/msg/startup.msg').toString().bold.yellow,\n    `v${packageVersion}`\n  );\n};\n\n/**\n * Prints the CLI usage. If required, it can list properties recursively\n */\nexport function printUsage() {\n  const pad = 48;\n  const readme = 'https://github.com/highcharts/node-export-server#readme';\n\n  // Display readme information\n  console.log(\n    'Usage of CLI arguments:'.bold,\n    '\\n------',\n    `\\nFor more detailed information visit readme at: ${readme.bold.yellow}.`\n  );\n\n  const cycleCategories = (categories) => {\n    for (const [name, option] of Object.entries(categories)) {\n      // If category has more levels, go further\n      if (!Object.prototype.hasOwnProperty.call(option, 'value')) {\n        cycleCategories(option);\n      } else {\n        let descName = `  --${option.cliName || name} ${\n          ('<' + option.type + '>').green\n        } `;\n        if (descName.length < pad) {\n          for (let i = descName.length; i < pad; i++) {\n            descName += '.';\n          }\n        }\n\n        // Display correctly aligned messages\n        console.log(\n          descName,\n          option.description,\n          `[Default: ${option.value.toString().bold}]`.blue\n        );\n      }\n    }\n  };\n\n  // Cycle through options of each categories and display the usage info\n  Object.keys(defaultConfig).forEach((category) => {\n    // Only puppeteer and highcharts categories cannot be configured through CLI\n    if (!['puppeteer', 'highcharts'].includes(category)) {\n      console.log(`\\n${category.toUpperCase()}`.red);\n      cycleCategories(defaultConfig[category]);\n    }\n  });\n  console.log('\\n');\n}\n\n/**\n * Rounds number to passed precision.\n *\n * @param {number} value - Number to round.\n * @param {number} precision - A precision of rounding.\n */\nexport const roundNumber = (value, precision = 1) => {\n  const multiplier = Math.pow(10, precision || 0);\n  return Math.round(+value * multiplier) / multiplier;\n};\n\n/**\n * Casts the item to boolean.\n *\n * @param {any} item - Item to be cast.\n */\nexport const toBoolean = (item) =>\n  ['false', 'undefined', 'null', 'NaN', '0', ''].includes(item)\n    ? false\n    : !!item;\n\n/**\n * If necessary, places a custom code inside a function.\n *\n * @param {any} customCode - The customCode.\n */\nexport const wrapAround = (customCode, allowFileResources) => {\n  if (customCode && typeof customCode === 'string') {\n    customCode = customCode.trim();\n\n    if (customCode.endsWith('.js')) {\n      return allowFileResources\n        ? wrapAround(readFileSync(customCode, 'utf8'))\n        : false;\n    } else if (\n      customCode.startsWith('function()') ||\n      customCode.startsWith('function ()') ||\n      customCode.startsWith('()=>') ||\n      customCode.startsWith('() =>')\n    ) {\n      return `(${customCode})()`;\n    }\n    return customCode.replace(/;$/, '');\n  }\n};\n\n/**\n * Utility to measure time.\n */\nexport const measureTime = () => {\n  const start = process.hrtime.bigint();\n  return () => Number(process.hrtime.bigint() - start) / 1000000;\n};\n\nexport default {\n  __dirname,\n  clearText,\n  expBackoff,\n  fixType,\n  handleResources,\n  isCorrectJSON,\n  isObject,\n  isPrivateRangeUrlFound,\n  optionsStringify,\n  printLogo,\n  printUsage,\n  roundNumber,\n  toBoolean,\n  wrapAround,\n  measureTime\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport rateLimit from 'express-rate-limit';\n\nimport { clearText } from '../utils.js';\nimport { log } from '../logger.js';\n\n/**\n * Enables rate limiting for a given app.\n *\n * @param {object} app - The express app.\n * @param {object} limitConfig - The options for the rate limiting.\n */\nexport default (app, limitConfig) => {\n  const msg =\n    'Too many requests, you have been rate limited. Please try again later.';\n\n  // Options for the rate limiter\n  const rateOptions = {\n    max: limitConfig.maxRequests || 30,\n    window: limitConfig.window || 1,\n    delay: limitConfig.delay || 0,\n    trustProxy: limitConfig.trustProxy || false,\n    skipKey: limitConfig.skipKey || false,\n    skipToken: limitConfig.skipToken || false\n  };\n\n  // Set if behind a proxy\n  if (rateOptions.trustProxy) {\n    app.enable('trust proxy');\n  }\n\n  // Create a limiter\n  const limiter = rateLimit({\n    windowMs: rateOptions.window * 60 * 1000,\n    // Limit each IP to 100 requests per windowMs\n    max: rateOptions.max,\n    // Disable delaying, full speed until the max limit is reached\n    delayMs: rateOptions.delay,\n    handler: (request, response) => {\n      response.format({\n        json: () => {\n          response.status(429).send({ message: msg });\n        },\n        default: () => {\n          response.status(429).send(msg);\n        }\n      });\n    },\n    skip: (request) => {\n      // Allow bypassing the limiter if a valid key/token has been sent\n      if (\n        rateOptions.skipKey !== false &&\n        rateOptions.skipToken !== false &&\n        request.query.key === rateOptions.skipKey &&\n        request.query.access_token === rateOptions.skipToken\n      ) {\n        log(4, '[rate-limiting] Skipping rate limiter.');\n        return true;\n      }\n      return false;\n    }\n  });\n\n  // Use a limiter as a middleware\n  app.use(limiter);\n\n  log(\n    3,\n    clearText(\n      `[rate-limiting] Enabled rate limiting: ${rateOptions.max} requests\n      per ${rateOptions.window} minute per IP, trusting proxy:\n      ${rateOptions.trustProxy}.`\n    )\n  );\n};\n","/**\n * This module exports two functions: fetch (for GET requests) and post (for POST requests).\n */\n\nimport http from 'http';\nimport https from 'https';\n\n/**\n * Determines the protocol of the given URL (either `http` or `https`).\n *\n * @function\n * @param {string} url - The URL whose protocol needs to be determined.\n * @returns {Object} Returns the `https` module if the URL starts with 'https',\n * otherwise returns the `http` module.\n * @private\n *\n * @example\n *\n * const protocol = getProtocol('https://example.com');\n * console.log(protocol); // Outputs the 'https' module\n */\nconst getProtocol = (url) => {\n  return url.startsWith('https') ? https : http;\n};\n\n/**\n * Sends a GET request to the specified URL with optional request options.\n *\n * @function\n * @async\n * @param {string} url - The URL to fetch.\n * @param {Object} [requestOptions={}] - Optional request options and headers.\n * @returns {Promise<Object>} Returns a promise that resolves with the response object.\n * The response object contains a `.text` property with the raw response data.\n * @throws {Error} Throws an error if the request fails or if no data is fetched from the URL.\n *\n * @example\n *\n * async function getData() {\n *   try {\n *     const response = await fetch('https://api.example.com/data');\n *     console.log(response.text);\n *   } catch (error) {\n *     console.error('Error fetching data:', error);\n *   }\n * }\n *\n * getData();\n */\nasync function fetch(url, requestOptions = {}) {\n  return new Promise((resolve, reject) => {\n    const protocol = getProtocol(url);\n\n    protocol\n      .get(url, requestOptions, (res) => {\n        let data = '';\n\n        // A chunk of data has been received.\n        res.on('data', (chunk) => {\n          data += chunk;\n        });\n\n        // The whole response has been received.\n        res.on('end', () => {\n          if (!data) {\n            reject('Nothing was fetched from the URL.');\n          }\n\n          res.text = data;\n          resolve(res);\n        });\n      })\n      .on('error', (error) => {\n        reject(error);\n      });\n  });\n}\n\n/**\n * Sends a POST request to the specified URL with the given body and request options.\n *\n * @function\n * @async\n * @param {string} url - The URL to which the request should be sent.\n * @param {Object} [body={}] - The data to be sent as the request body, in JSON format.\n * @param {Object} [requestOptions={}] - Optional request options and headers.\n * @returns {Promise<Object>} - Returns a promise that resolves with the parsed JSON response.\n * @throws {Error} Throws an error if the request fails or if the response cannot be parsed.\n *\n * @example\n *\n * async function sendData() {\n *   const dataToSend = {\n *     key1: 'value1',\n *     key2: 'value2',\n *   };\n *   try {\n *     const response = await post('https://api.example.com/data', dataToSend);\n *     console.log(response);\n *   } catch (error) {\n *     console.error('Error sending data:', error);\n *   }\n * }\n *\n * sendData();\n */\nasync function post(url, body = {}, requestOptions = {}) {\n  return new Promise((resolve, reject) => {\n    const protocol = getProtocol(url);\n    const data = JSON.stringify(body);\n\n    // Set default headers and merge with requestOptions\n    const options = Object.assign(\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-Length': data.length\n        }\n      },\n      requestOptions\n    );\n\n    const req = protocol\n      .request(url, options, (res) => {\n        let responseData = '';\n\n        // A chunk of data has been received.\n        res.on('data', (chunk) => {\n          responseData += chunk;\n        });\n\n        // The whole response has been received.\n        res.on('end', () => {\n          try {\n            res.text = responseData;\n            resolve(res);\n          } catch (error) {\n            reject(error);\n          }\n        });\n      })\n      .on('error', (error) => {\n        reject(error);\n      });\n\n    // Write the request body and end the request.\n    req.write(data);\n    req.end();\n  });\n}\n\nexport default fetch;\nexport { fetch, post };\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\n// The cache manager manages the Highcharts library and its dependencies.\n// The cache itself is stored in .cache, and is checked by the config system\n// before starting the service\n\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';\nimport { join } from 'path';\n\nimport dotenv from 'dotenv';\nimport HttpsProxyAgent from 'https-proxy-agent';\nimport { fetch } from './fetch.js';\n\nimport { log } from './logger.js';\nimport { __dirname } from '../lib/utils.js';\n\ndotenv.config();\n\nconst cachePath = join(__dirname, '.cache');\n\nconst cache = {\n  cdnURL: 'https://code.highcharts.com/',\n  activeManifest: {},\n  sources: '',\n  hcVersion: ''\n};\n\n// TODO: The config should be accesssible globally so we don't have to do this sort of thing..\nlet appliedConfig = false;\n\n/**\n * Extracts the Highcharts version from the cache\n */\nconst extractVersion = () =>\n  (cache.hcVersion = cache.sources\n    .substr(0, cache.sources.indexOf('*/'))\n    .replace('/*', '')\n    .replace('*/', '')\n    .replace(/\\n/g, '')\n    .trim());\n\n/**\n * Saves the Highcharts part of a config to a manifest file in the cache\n *\n * @param {object} config - Highcharts related configuration object.\n * @param {object} fetchedModules - An object that contains mapped names of\n * fetched Highcharts modules to use.\n */\nconst saveConfigToManifest = async (config, fetchedModules) => {\n  const newManifest = {\n    version: config.version,\n    modules: fetchedModules || {}\n  };\n\n  // Update cache object with the current modules\n  cache.activeManifest = newManifest;\n\n  log(4, '[cache] writing new manifest');\n\n  try {\n    writeFileSync(\n      join(cachePath, 'manifest.json'),\n      JSON.stringify(newManifest),\n      'utf8'\n    );\n  } catch (error) {\n    log(1, `[cache] Error writing cache manifest: ${error}.`);\n  }\n};\n\n/**\n * Fetches a single script.\n *\n * @param {string} script - A path to script to get.\n * @param {object} proxyAgent - The proxy agent to use for a request.\n */\nconst fetchScript = async (script, proxyAgent) => {\n  try {\n    // Get rid of the .js from the custom strings\n    if (script.endsWith('.js')) {\n      script = script.substring(0, script.length - 3);\n    }\n\n    log(4, `[cache] Fetching script - ${script}.js`);\n\n    // If exists, add proxy agent to request options\n    const requestOptions = proxyAgent\n      ? {\n          agent: proxyAgent,\n          timeout: +process.env['PROXY_SERVER_TIMEOUT'] || 5000\n        }\n      : {};\n\n    // Fetch the script\n    const response = await fetch(`${script}.js`, requestOptions);\n\n    // If OK, return its text representation\n    if (response.statusCode === 200) {\n      return response.text;\n    }\n\n    throw `${response.statusCode}`;\n  } catch (error) {\n    log(1, `[cache] Error fetching script ${script}.js: ${error}.`);\n    throw error;\n  }\n};\n\n/**\n * Updates the Highcharts cache.\n *\n * @param {object} config - Highcharts related configuration object.\n * @param {string} sourcePath - A path to the file where save updated sources.\n * @return {object} An object that contains mapped names of fetched Highcharts\n * modules to use.\n */\nconst updateCache = async (config, sourcePath) => {\n  const { coreScripts, modules, indicators, scripts: customScripts } = config;\n  const hcVersion =\n    config.version === 'latest' || !config.version ? '' : `${config.version}/`;\n\n  log(3, '[cache] Updating cache to Highcharts ', hcVersion);\n\n  // Gather all scripts to fetch\n  const allScripts = [\n    ...coreScripts.map((c) => `${hcVersion}${c}`),\n    ...modules.map((m) =>\n      m === 'map' ? `maps/${hcVersion}modules/${m}` : `${hcVersion}modules/${m}`\n    ),\n    ...indicators.map((i) => `stock/${hcVersion}indicators/${i}`)\n  ];\n\n  // Configure proxy if exists\n  let proxyAgent;\n  const proxyHost = process.env['PROXY_SERVER_HOST'];\n  const proxyPort = process.env['PROXY_SERVER_PORT'];\n\n  if (proxyHost && proxyPort) {\n    proxyAgent = new HttpsProxyAgent({\n      host: proxyHost,\n      port: +proxyPort\n    });\n  }\n\n  const fetchedModules = {};\n  try {\n    cache.sources = // TODO: convert to for loop\n      (\n        await Promise.all([\n          ...allScripts.map(async (script) => {\n            const text = await fetchScript(\n              `${config.cdnURL || cache.cdnURL}${script}`,\n              proxyAgent\n            );\n\n            // If fetched correctly, set it\n            if (typeof text === 'string') {\n              fetchedModules[\n                script.replace(\n                  /(.*)\\/|(.*)modules\\/|stock\\/(.*)indicators\\/|maps\\/(.*)modules\\//gi,\n                  ''\n                )\n              ] = 1;\n            }\n\n            return text;\n          }),\n          ...customScripts.map((script) => fetchScript(script, proxyAgent))\n        ])\n      ).join(';\\n');\n    extractVersion();\n\n    // Save the fetched modules into caches' source JSON\n    writeFileSync(sourcePath, cache.sources);\n    return fetchedModules;\n  } catch (error) {\n    log(1, '[cache] Unable to update local Highcharts cache.');\n  }\n};\n\nexport const updateVersion = async (newVersion) =>\n  appliedConfig\n    ? await checkCache(\n        Object.assign(appliedConfig, {\n          version: newVersion\n        })\n      )\n    : false;\n\n/**\n * Fetches any missing Highcharts and dependencies\n *\n * @param {object} config - Highcharts related configuration object.\n */\nexport const checkCache = async (config) => {\n  let fetchedModules;\n  // Prepare paths to manifest and sources from the .cache folder\n  const manifestPath = join(cachePath, 'manifest.json');\n  const sourcePath = join(cachePath, 'sources.js');\n\n  // TODO: deal with trying to switch to the running version\n  // const activeVersion = appliedConfig ? appliedConfig.version : false;\n\n  appliedConfig = config;\n\n  // Create the .cache destination if it doesn't exist already\n  !existsSync(cachePath) && mkdirSync(cachePath);\n\n  // Fetch all the scripts either if manifest.json does not exist\n  // or if the forceFetch option is enabled\n  if (!existsSync(manifestPath) || config.forceFetch) {\n    log(3, '[cache] Fetching and caching Highcharts dependencies.');\n    fetchedModules = await updateCache(config, sourcePath);\n  } else {\n    let requestUpdate = false;\n\n    // Read the manifest JSON\n    const manifest = JSON.parse(readFileSync(manifestPath));\n\n    // Check if the modules is an array, if so, we rewrite it to a map to make\n    // it easier to resolve modules.\n    if (manifest.modules && Array.isArray(manifest.modules)) {\n      const moduleMap = {};\n      manifest.modules.forEach((m) => (moduleMap[m] = 1));\n      manifest.modules = moduleMap;\n    }\n\n    const { modules, coreScripts, indicators } = config;\n    const numberOfModules =\n      modules.length + coreScripts.length + indicators.length;\n\n    // Compare the loaded config with the contents in .cache.\n    // If there are changes, fetch requested modules and products,\n    // and bake them into a giant blob. Save the blob.\n    if (manifest.version !== config.version) {\n      log(3, '[cache] Highcharts version mismatch in cache, need to re-fetch.');\n      requestUpdate = true;\n    } else if (Object.keys(manifest.modules || {}).length !== numberOfModules) {\n      log(\n        3,\n        '[cache] Cache and requested modules does not match, need to re-fetch.'\n      );\n      requestUpdate = true;\n    } else {\n      // Check each module, if anything is missing refetch everything\n      requestUpdate = (config.modules || []).some((moduleName) => {\n        if (!manifest.modules[moduleName]) {\n          log(\n            3,\n            `[cache] The ${moduleName} missing in cache, need to re-fetch.`\n          );\n          return true;\n        }\n      });\n    }\n\n    if (requestUpdate) {\n      fetchedModules = await updateCache(config, sourcePath);\n    } else {\n      log(3, '[cache] Dependency cache is up to date, proceeding.');\n\n      // Load the sources\n      cache.sources = readFileSync(sourcePath, 'utf8');\n\n      // Get current modules map\n      fetchedModules = manifest.modules;\n      extractVersion();\n    }\n  }\n\n  // Finally, save the new manifest, which is basically our current config\n  // in a slightly different format\n  await saveConfigToManifest(config, fetchedModules);\n};\n\nexport default {\n  checkCache,\n  updateVersion,\n  getCache: () => cache,\n  highcharts: () => cache.sources,\n  version: () => cache.hcVersion\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport puppeteer from 'puppeteer';\nimport fs from 'fs';\nimport * as url from 'url';\nimport { log } from './logger.js';\nimport path from 'node:path';\n\n// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1463328\n// Not ideal - leaves trash in the FS\nimport { randomBytes } from 'node:crypto';\n\nconst RANDOM_PID = randomBytes(64).toString('base64url');\nconst PUPPETEER_DIR = path.join('tmp', `puppeteer-${RANDOM_PID}`);\nconst DATA_DIR = path.join(PUPPETEER_DIR, 'profile');\n\n// The minimal args to speed up the browser\nconst minimalArgs = [\n  `--user-data-dir=${DATA_DIR}`,\n  '--autoplay-policy=user-gesture-required',\n  '--disable-background-networking',\n  '--disable-background-timer-throttling',\n  '--disable-backgrounding-occluded-windows',\n  '--disable-breakpad',\n  '--disable-client-side-phishing-detection',\n  '--disable-component-update',\n  '--disable-default-apps',\n  '--disable-dev-shm-usage',\n  '--disable-domain-reliability',\n  '--disable-extensions',\n  '--disable-features=AudioServiceOutOfProcess',\n  '--disable-hang-monitor',\n  '--disable-ipc-flooding-protection',\n  '--disable-notifications',\n  '--disable-offer-store-unmasked-wallet-cards',\n  '--disable-popup-blocking',\n  '--disable-print-preview',\n  '--disable-prompt-on-repost',\n  '--disable-renderer-backgrounding',\n  '--disable-session-crashed-bubble',\n  '--disable-setuid-sandbox',\n  '--disable-speech-api',\n  '--disable-sync',\n  '--hide-crash-restore-bubble',\n  '--hide-scrollbars',\n  '--ignore-gpu-blacklist',\n  '--metrics-recording-only',\n  '--mute-audio',\n  '--no-default-browser-check',\n  '--no-first-run',\n  '--no-pings',\n  '--no-sandbox',\n  '--no-zygote',\n  '--password-store=basic',\n  '--use-mock-keychain'\n];\n\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\n\nconst template = fs.readFileSync(\n  __dirname + '/../templates/template.html',\n  'utf8'\n);\n\nlet browser;\n\nconst setPageContent = async (page) => {\n  await page.setContent(template);\n  await page.addScriptTag({ path: __dirname + '/../.cache/sources.js' });\n  // eslint-disable-next-line no-undef\n  await page.evaluate(() => window.setupHighcharts());\n\n  page.on('pageerror', async (err) => {\n    // TODO: Consider adding a switch here that turns on log(0) logging\n    // on page errors.\n    log(1, '[page error]', err);\n    await page.$eval(\n      '#container',\n      (element, errorMessage) => {\n        // eslint-disable-next-line no-undef\n        if (window._displayErrors) {\n          element.innerHTML = errorMessage;\n        }\n      },\n      `<h1>Chart input data error</h1>${err.toString()}`\n    );\n  });\n};\n\nexport const newPage = async () => {\n  if (!browser) return false;\n\n  const page = await browser.newPage();\n\n  // Disable cache\n  await page.setCacheEnabled(false);\n\n  // Set the content\n  await setPageContent(page);\n  return page;\n};\n\nexport const clearPage = async (page, hardReset = false) => {\n  try {\n    if (hardReset) {\n      // Navigate to about:blank\n      await page.goto('about:blank');\n\n      // Set the content and and scripts again\n      await setPageContent(page);\n    } else {\n      // Clear body content\n      await page.$eval(\n        'body',\n        (body) =>\n          (body.innerHTML =\n            '<div id=\"chart-container\"><div id=\"container\"></div></div>')\n      );\n    }\n  } catch (error) {\n    log(3, '[browser] Could not clear page');\n  }\n};\n\nexport const create = async (puppeteerArgs) => {\n  const allArgs = [...minimalArgs, ...(puppeteerArgs || [])];\n\n  // Create a browser\n  if (!browser) {\n    let tryCount = 0;\n\n    const open = async () => {\n      try {\n        log(\n          3,\n          '[browser] attempting to get a browser instance (try',\n          tryCount + ')'\n        );\n\n        browser = await puppeteer.launch({\n          headless: 'new',\n          args: allArgs,\n          userDataDir: './tmp/'\n        });\n      } catch (e) {\n        log(0, '[browser]', e);\n        if (++tryCount < 25) {\n          log(3, '[browser] failed:', e);\n          await new Promise((response) => setTimeout(response, 4000));\n          await open();\n        } else {\n          log(0, 'Max retries reached');\n        }\n      }\n    };\n\n    try {\n      await open();\n    } catch (e) {\n      log(0, '[browser] Unable to open browser');\n      return false;\n    }\n\n    if (!browser) {\n      log(0, '[browser] Unable to open browser');\n      return false;\n    }\n  }\n\n  // Return a browser promise\n  return browser;\n};\n\nexport const get = async () => {\n  if (!browser) {\n    throw 'No valid browser has been created';\n  }\n\n  return browser;\n};\n\nexport const close = async () => {\n  // Close the browser when connnected\n  if (browser.connected) {\n    await browser.close();\n  }\n};\n\nexport default {\n  newPage,\n  clearPage,\n  get,\n  close\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\n// TODO: remove this temp benchmark stuff. I had this idea of doing a general benchmarking\n// system, but it adds so much bloat in the code that it shouldn't be there.\n\nimport benchmark from './benchmark.js';\nimport cache from './cache.js';\nimport { log } from './logger.js';\nimport svgTemplate from './../templates/svg_export/svg_export.js';\n\nimport { readFileSync } from 'fs';\nimport path from 'path';\nimport * as url from 'url';\n\nconst __basedir = url.fileURLToPath(new URL('.', import.meta.url));\n\n// const jsonTemplate = require('./../templates/json_export/json_export.js');\n\n/**\n * Gets the clip region for the chart DOM node.\n *\n * @param {object} page - A page of a browser instance.\n * @return {object} - A clipped region.\n */\nconst getClipRegion = (page) =>\n  page.$eval('#chart-container', (element) => {\n    const { x, y, width, height } = element.getBoundingClientRect();\n    return {\n      x,\n      y,\n      width,\n      height: Math.trunc(height > 1 ? height : 500)\n    };\n  });\n\n/**\n * Rasterizes the page to an image (PNG or JPEG)\n *\n * @param {object} page - A page of a browser instance.\n * @param {string} type - The type of a result image.\n * @param {string} encoding - The type of encoding used.\n * @param {string} clip - The clip region.\n * @param {number} rasterizationTimeout - The rasterization timeout\n * in milliseconds.\n * @returns {string} - A string representation of a screenshot.\n */\nconst createImage = async (page, type, encoding, clip, rasterizationTimeout) =>\n  Promise.race([\n    page.screenshot({\n      type,\n      encoding,\n      clip,\n\n      // #447, #463 - always render on a transparent page if\n      // the expected type format is PNG\n      omitBackground: type == 'png'\n    }),\n    new Promise((_resolve, reject) =>\n      setTimeout(\n        () => reject(new Error('Rasterization timeout')),\n        rasterizationTimeout || 1500\n      )\n    )\n  ]);\n\n/**\n * Turns page into a PDF.\n *\n * @param {object} page - A page of a browser instance.\n * @param {number} height - The height of a chart.\n * @param {number} width - The width of a chart.\n * @param {string} encoding - The type of encoding used.\n * @return {object} - A buffer with PDF representation.\n */\nconst createPDF = async (page, height, width, encoding) =>\n  await page.pdf({\n    // This will remove an extra empty page in PDF exports\n    height: height + 1,\n    width,\n    encoding\n  });\n\n/**\n * Exports as a SVG.\n *\n * @param {object} page - A page of a browser instance.\n * @return {object} - The outerHTML element with the SVG representation.\n */\nconst createSVG = async (page) =>\n  await page.$eval(\n    '#container svg:first-of-type',\n    (element) => element.outerHTML\n  );\n\n/** Load config into a page and render a chart */\nconst setAsConfig = async (page, chart, options) =>\n  await page.evaluate(\n    // eslint-disable-next-line no-undef\n    (chart, options) => window.triggerExport(chart, options),\n    chart,\n    options\n  );\n\n/** Load SVG into a page */\n// const setAsSVG = async (page, svgStr) => true;\n\n/**\n * Does an export for a given browser.\n *\n * @param {object} browser - A browser instance.\n * @param {object} chart - Chart's options.\n * @param {object} options - All options object.\n * @return {object} - The data returned from one of the methods for exporting\n * a specific type of an image.\n */\nexport default async (page, chart, options) => {\n  /**\n   * Keeps track of all resources added on the page with addXXXTag. etc\n   * It's VITAL that all added resources ends up here so we can clear things\n   * out when doing a new export in the same page!\n   */\n  const injectedResources = [];\n\n  /** Clear out all state set on the page with addScriptTag/addStyleTag. */\n  const clearInjected = async (page) => {\n    for (const res of injectedResources) {\n      await res.dispose();\n    }\n\n    // Reset all CSS and script tags\n    await page.evaluate(() => {\n      // eslint-disable-next-line no-undef\n      const [, ...scriptsToRemove] = document.getElementsByTagName('script');\n      // eslint-disable-next-line no-undef\n      const [, ...stylesToRemove] = document.getElementsByTagName('style');\n      // eslint-disable-next-line no-undef\n      const [...linksToRemove] = document.getElementsByTagName('link');\n\n      // Remove tags\n      for (const element of [\n        ...scriptsToRemove,\n        ...stylesToRemove,\n        ...linksToRemove\n      ]) {\n        element.remove();\n      }\n    });\n  };\n\n  try {\n    const exportBench = benchmark('Puppeteer');\n\n    log(4, '[export] Determining export path.');\n\n    const exportOptions = options.export;\n\n    // Force a rAF\n    // See https://github.com/puppeteer/puppeteer/issues/7507\n    // eslint-disable-next-line no-undef\n    await page.evaluate(() => requestAnimationFrame(() => {}));\n\n    // Decide whether display error or debbuger wrapper around it\n    const displayErrors =\n      exportOptions?.options?.chart?.displayErrors &&\n      cache.getCache().activeManifest.modules.debugger;\n\n    // eslint-disable-next-line no-undef\n    await page.evaluate((d) => (window._displayErrors = d), displayErrors);\n\n    const svgBench = benchmark('SVG handling');\n\n    let isSVG;\n\n    if (\n      chart.indexOf &&\n      (chart.indexOf('<svg') >= 0 || chart.indexOf('<?xml') >= 0)\n    ) {\n      // SVG INPUT HANDLING\n\n      log(4, '[export] Treating as SVG.');\n\n      // If input is also svg, just return it\n      if (exportOptions.type === 'svg') {\n        return chart;\n      }\n\n      isSVG = true;\n      const setPageBench = benchmark('Setting content');\n      await page.setContent(svgTemplate(chart));\n      setPageBench();\n    } else {\n      // JSON Config handling\n\n      log(4, '[export] Treating as config.');\n\n      // Need to perform straight inject\n      if (exportOptions.strInj) {\n        // Injection based configuration export\n        const setPageBench = benchmark('Setting page content (inject)');\n\n        await setAsConfig(\n          page,\n          {\n            chart: {\n              height: exportOptions.height,\n              width: exportOptions.width\n            }\n          },\n          options\n        );\n\n        setPageBench();\n      } else {\n        // Basic configuration export\n\n        chart.chart.height = exportOptions.height;\n        chart.chart.width = exportOptions.width;\n\n        const setContentBench = benchmark('Setting page content (config)');\n        await setAsConfig(page, chart, options);\n        setContentBench();\n      }\n    }\n\n    svgBench();\n    const resBench = benchmark('Applying resources');\n\n    // Use resources\n    const resources = options.customCode.resources;\n    if (resources) {\n      // Load custom JS code\n      if (resources.js) {\n        injectedResources.push(\n          await page.addScriptTag({\n            content: resources.js\n          })\n        );\n      }\n\n      // Load scripts from all custom files\n      if (resources.files) {\n        for (const file of resources.files) {\n          try {\n            const isLocal = !file.startsWith('http') ? true : false;\n\n            // Add each custom script from resources' files\n            injectedResources.push(\n              await page.addScriptTag(\n                isLocal\n                  ? {\n                      content: readFileSync(file, 'utf8')\n                    }\n                  : {\n                      url: file\n                    }\n              )\n            );\n          } catch (notice) {\n            log(4, '[export] JS file not found.');\n          }\n        }\n      }\n\n      const cssBench = benchmark('Loading css');\n\n      // Load CSS\n      if (resources.css) {\n        let cssImports = resources.css.match(/@import\\s*([^;]*);/g);\n        if (cssImports) {\n          // Handle css section\n          for (let cssImportPath of cssImports) {\n            if (cssImportPath) {\n              cssImportPath = cssImportPath\n                .replace('url(', '')\n                .replace('@import', '')\n                .replace(/\"/g, '')\n                .replace(/'/g, '')\n                .replace(/;/, '')\n                .replace(/\\)/g, '')\n                .trim();\n\n              // Add each custom css from resources\n              if (cssImportPath.startsWith('http')) {\n                injectedResources.push(\n                  await page.addStyleTag({\n                    url: cssImportPath\n                  })\n                );\n              } else if (options.customCode.allowFileResources) {\n                injectedResources.push(\n                  await page.addStyleTag({\n                    path: path.join(__basedir, cssImportPath)\n                  })\n                );\n              }\n            }\n          }\n        }\n\n        // The rest of the CSS section will be content by now\n        injectedResources.push(\n          await page.addStyleTag({\n            content: resources.css.replace(/@import\\s*([^;]*);/g, '') || ' '\n          })\n        );\n      }\n\n      cssBench();\n    }\n\n    resBench();\n\n    // Get the real chart size\n    const size = isSVG\n      ? await page.$eval(\n          '#chart-container svg:first-of-type',\n          async (element, scale) => {\n            return {\n              chartHeight: element.height.baseVal.value * scale,\n              chartWidth: element.width.baseVal.value * scale\n            };\n          },\n          parseFloat(exportOptions.scale)\n        )\n      : await page.evaluate(async () => {\n          // eslint-disable-next-line no-undef\n          const { chartHeight, chartWidth } = window.Highcharts.charts[0];\n          return {\n            chartHeight,\n            chartWidth\n          };\n        });\n\n    const vpBench = benchmark('Setting viewport');\n\n    // Set final height and width for viewport\n    const viewportHeight = Math.ceil(size?.chartHeight || exportOptions.height);\n    const viewportWidth = Math.ceil(size?.chartWidth || exportOptions.width);\n\n    // Set the viewport for the first time\n    // NOTE: the call to setViewport is expensive - can we get away with only\n    // calling it once, e.g. moving this one into the isSVG condition below?\n    await page.setViewport({\n      height: viewportHeight,\n      width: viewportWidth,\n      deviceScaleFactor: isSVG ? 1 : parseFloat(exportOptions.scale)\n    });\n\n    // Prepare a zoom callback for the next evaluate call\n    const zoomCallback = isSVG\n      ? // In case of SVG the zoom must be set directly for body\n        (scale) => {\n          // Set the zoom as scale\n          // eslint-disable-next-line no-undef\n          document.body.style.zoom = scale;\n\n          // Set the margin to 0px\n          // eslint-disable-next-line no-undef\n          document.body.style.margin = '0px';\n        }\n      : // No need for such scale manipulation in case of other types of exports\n        () => {\n          // Reset the zoom for other exports than to SVGs\n          // eslint-disable-next-line no-undef\n          document.body.style.zoom = 1;\n        };\n\n    // Set the zoom accordingly\n    await page.evaluate(zoomCallback, parseFloat(exportOptions.scale));\n\n    // Get the clip region for the page\n    const { height, width, x, y } = await getClipRegion(page);\n\n    if (!isSVG) {\n      // Set the final viewport now that we have the real height\n      await page.setViewport({\n        width: Math.round(width),\n        height: Math.round(height),\n        deviceScaleFactor: parseFloat(exportOptions.scale)\n      });\n    }\n\n    vpBench();\n\n    let data;\n\n    const expBenchmark = benchmark('Rasterizing chart');\n\n    // RASTERIZATION\n    if (exportOptions.type === 'svg') {\n      // SVG\n      data = await createSVG(page);\n    } else if (exportOptions.type === 'png' || exportOptions.type === 'jpeg') {\n      // PNG or JPEG\n      data = await createImage(\n        page,\n        exportOptions.type,\n        'base64',\n        {\n          width: viewportWidth,\n          height: viewportHeight,\n          x,\n          y\n        },\n        exportOptions.rasterizationTimeout\n      );\n    } else if (exportOptions.type === 'pdf') {\n      // PDF\n      data = await createPDF(page, viewportHeight, viewportWidth, 'base64');\n    } else {\n      throw `Unsupported output format ${exportOptions.type}`;\n    }\n\n    // Destroy old charts after the export is done\n    await page.evaluate(() => {\n      // We are not guaranteed that Highcharts is loaded, e,g, when doing SVG\n      // exports\n      if (typeof Highcharts !== 'undefined') {\n        // eslint-disable-next-line no-undef\n        const oldCharts = Highcharts.charts;\n\n        // Check in any already existing charts\n        if (Array.isArray(oldCharts) && oldCharts.length) {\n          // Destroy old charts\n          for (const oldChart of oldCharts) {\n            oldChart && oldChart.destroy();\n            // eslint-disable-next-line no-undef\n            Highcharts.charts.shift();\n          }\n        }\n      }\n    });\n\n    expBenchmark();\n    exportBench();\n\n    await clearInjected(page);\n\n    return data;\n  } catch (error) {\n    await clearInjected(page);\n    log(1, `[export] Error encountered during export: ${error}`);\n\n    return error;\n  }\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2022, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { log } from './logger.js';\nconst timers = {};\n\n// TODO: Read from config\nlet enabled = false;\n\nexport default (id) => {\n  if (!enabled) {\n    return () => {};\n  }\n\n  timers[id] = new Date();\n  return () => {\n    log(\n      3,\n      `[benchmark] - ${id}: ${new Date().getTime() - timers[id].getTime()}ms`\n    );\n  };\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport cssTemplate from './css.js';\n\nexport default (chart) => `\n<!DOCTYPE html>\n<html lang='en-US'>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    <title>Highcarts Export</title>\n  </head>\n  <style>\n    ${cssTemplate()}\n  </style>\n  <body>\n    <div id=\"chart-container\">\n      ${chart}\n    </div>\n  </body>\n</html>\n\n`;\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { v4 as uuid } from 'uuid';\nimport { Pool } from 'tarn';\nimport {\n  close,\n  create as createBrowser,\n  newPage as browserNewPage,\n  clearPage\n} from './browser.js';\nimport { log } from './logger.js';\n\nimport puppeteerExport from './export.js';\n\nlet performedExports = 0;\nlet exportAttempts = 0;\nlet timeSpent = 0;\nlet droppedExports = 0;\nlet spentAverage = 0;\nlet poolConfig = {};\n\n// The pool instance\nlet pool = false;\n\n// Custom puppeteer arguments\nlet puppeteerArgs;\n\nconst factory = {\n  /**\n   * Creates a new worker.\n   *\n   * @return {object} - An object with the id of a resource, the work count and\n   * a reference to the browser page.\n   */\n  create: async () => {\n    const id = uuid();\n    let page = false;\n\n    const s = new Date().getTime();\n\n    try {\n      page = await browserNewPage();\n\n      if (!page || page.isClosed()) {\n        throw '[pool] Invalid page';\n      }\n\n      log(\n        3,\n        `[pool] Successfully created a worker ${id} - took ${\n          new Date().getTime() - s\n        } ms.`\n      );\n    } catch (error) {\n      log(\n        1,\n        `[pool] Error creating a new page in pool entry creation! ${error}`\n      );\n\n      throw 'Error creating page';\n    }\n\n    return {\n      id,\n      page,\n      // Try to distribute the initial work count\n      workCount: Math.round(Math.random() * (poolConfig.workLimit / 2))\n    };\n  },\n\n  /**\n   * Validates a worker.\n   *\n   * @param {object} workerHandle - A browser's instance.\n   *\n   * @return {boolean} - Bool that indicates if a resource is valid or not.\n   */\n  validate: async (workerHandle) => {\n    if (\n      poolConfig.workLimit &&\n      ++workerHandle.workCount > poolConfig.workLimit\n    ) {\n      log(\n        3,\n        `[pool] Worker failed validation:`,\n        `exceeded work limit (limit is ${poolConfig.workLimit})`\n      );\n      return false;\n    }\n\n    // Clear page\n    await clearPage(workerHandle.page, true);\n    return true;\n  },\n\n  /**\n   * Destroys a worker.\n   *\n   * @param {object} workerHandle - A browser's instance.\n   */\n  destroy: (workerHandle) => {\n    log(3, `[pool] Destroying pool entry ${workerHandle.id}.`);\n\n    if (workerHandle.page) {\n      // We don't really need to wait around for this.\n      workerHandle.page.close();\n    }\n  },\n\n  // Logger function\n  log: (message, logLevel) => console.log(`${logLevel}: ${message}`)\n};\n\n/**\n * Inits the pool of resources.\n *\n * @param {object} config - Pool configuration along with custom puppeteer\n * arguments for the puppeteer.launch function.\n */\nexport const init = async (config) => {\n  // The newest puppeteer arguments for the browser creation\n  puppeteerArgs = config.puppeteerArgs;\n\n  // Wait until we've sucessfully created a browser instance.\n  try {\n    await createBrowser(puppeteerArgs);\n  } catch (e) {\n    log(0, '[pool|browser]', e);\n  }\n\n  // For the module scope usage\n  poolConfig = config && config.pool ? { ...config.pool } : {};\n\n  log(\n    3,\n    '[pool] Initializing pool:',\n    `min ${poolConfig.minWorkers}, max ${poolConfig.maxWorkers}.`\n  );\n\n  if (pool) {\n    return log(\n      4,\n      '[pool] Already initialized, please kill it before creating a new one.'\n    );\n  }\n\n  // Attach process' exit listeners\n  if (poolConfig.listenToProcessExits) {\n    attachProcessExitListeners();\n  }\n\n  if (parseInt(poolConfig.minWorkers) > parseInt(poolConfig.maxWorkers)) {\n    poolConfig.minWorkers = poolConfig.maxWorkers;\n  }\n\n  try {\n    // Create a pool along with a minimal number of resources\n    pool = new Pool({\n      // Get the create/validate/destroy/log functions\n      ...factory,\n      min: parseInt(poolConfig.minWorkers),\n      max: parseInt(poolConfig.maxWorkers),\n      acquireTimeoutMillis: poolConfig.acquireTimeout,\n      createTimeoutMillis: poolConfig.createTimeout,\n      destroyTimeoutMillis: poolConfig.destroyTimeout,\n      idleTimeoutMillis: poolConfig.idleTimeout,\n      createRetryIntervalMillis: poolConfig.createRetryInterval,\n      reapIntervalMillis: poolConfig.reaperInterval,\n      propagateCreateError: false\n    });\n\n    // Set events\n    pool.on('createFail', (eventId, err) => {\n      log(\n        1,\n        `[pool] Error when creating worker of an event id ${eventId}:`,\n        err\n      );\n    });\n\n    pool.on('acquireFail', (eventId, err) => {\n      log(\n        1,\n        `[pool] Error when acquiring worker of an event id ${eventId}:`,\n        err\n      );\n    });\n\n    pool.on('destroyFail', (eventId, resource, err) => {\n      log(\n        1,\n        `[pool] Error when destroying worker of an id ${resource.id}, event id ${eventId}:`,\n        err\n      );\n    });\n\n    pool.on('release', async (resource) => {\n      // Clear page\n      await clearPage(resource.page, false);\n      log(4, `[pool] Releasing a worker of an id ${resource.id}`);\n    });\n\n    pool.on('destroySuccess', (eventId, resource) => {\n      log(4, `[pool] Destroyed a worker of an id ${resource.id}`);\n    });\n\n    const initialResources = [];\n    // Create an initial number of resources\n    for (let i = 0; i < poolConfig.minWorkers; i++) {\n      try {\n        const resource = await pool.acquire().promise;\n        initialResources.push(resource);\n      } catch (error) {\n        log(1, `[pool] Couldn't create an initial resource ${error}`);\n      }\n    }\n\n    // Release the initial number of resources back to the pool\n    initialResources.forEach((resource) => {\n      pool.release(resource);\n    });\n\n    log(\n      3,\n      `[pool] The pool is ready with ${poolConfig.minWorkers} initial resources waiting.`\n    );\n  } catch (error) {\n    log(1, `[pool] Couldn't create the worker pool ${error}`);\n    throw error;\n  }\n};\n\n/**\n * Attaches process' exit listeners.\n */\nexport function attachProcessExitListeners() {\n  log(4, '[pool] Attaching exit listeners to the process.');\n\n  // Kill all pool resources on exit\n  process.on('exit', async () => {\n    await killPool();\n  });\n\n  // Handler for the SIGINT\n  process.on('SIGINT', (name, code) => {\n    log(4, `The ${name} event with code: ${code}.`);\n    process.exit(1);\n  });\n\n  // Handler for the SIGTERM\n  process.on('SIGTERM', (name, code) => {\n    log(4, `The ${name} event with code: ${code}.`);\n    process.exit(1);\n  });\n\n  // Handler for the uncaughtException\n  process.on('uncaughtException', async (error, name) => {\n    log(4, `The ${name} error, message: ${error.message}.`);\n  });\n}\n\n/**\n * Kills the pool and flush the browser instance.\n */\nexport async function killPool() {\n  log(3, '[pool] Killing all workers.');\n\n  // Return true when the pool is already destroyed\n  if (pool.destroyed) {\n    // Close the browser instance if still connected\n    await close();\n    return true;\n  }\n\n  // If still alive, destroy the pool of pages before closing a browser\n  await pool.destroy();\n\n  // Close the browser instance\n  await close();\n  return true;\n}\n\n/**\n * Posts work to the pool.\n *\n * @param {object} chart - Chart's options.\n * @param {object} options - All options object.\n */\nexport const postWork = async (chart, options) => {\n  let workerHandle;\n\n  // Handle fail conditions\n  const fail = (msg) => {\n    ++droppedExports;\n\n    if (workerHandle) {\n      pool.release(workerHandle);\n    }\n\n    throw 'In pool.postWork: ' + msg;\n  };\n\n  log(4, '[pool] Work received, starting to process.');\n\n  if (poolConfig.benchmarking) {\n    getPoolInfo();\n  }\n\n  ++exportAttempts;\n\n  if (!pool) {\n    log(1, '[pool] Work received, but pool has not been started.');\n    return fail('Pool is not inited but work was posted to it!');\n  }\n\n  // Acquire the worker along with the id of resource and work count\n  try {\n    log(4, '[pool] Acquiring worker');\n    workerHandle = await pool.acquire().promise;\n  } catch (error) {\n    return fail(`[pool] Error when acquiring available entry: ${error}`);\n  }\n\n  log(4, '[pool] Acquired worker handle');\n\n  if (!workerHandle.page) {\n    return fail('Resolved worker page is invalid: pool setup is wonky');\n  }\n\n  try {\n    // Save the start time\n    let workStart = new Date().getTime();\n\n    log(4, `[pool] Starting work on pool entry ${workerHandle.id}.`);\n\n    // Perform an export on a puppeteer level\n    const result = await puppeteerExport(workerHandle.page, chart, options);\n\n    // Check if it's an error\n    if (result instanceof Error) {\n      // TODO: If the export failed because puppeteer timed out, we need to force kill the worker so we get a new page. That needs to be handled better than this hack.\n      if (result.message === 'Rasterization timeout') {\n        workerHandle.page.close();\n        workerHandle.page = await browserNewPage();\n      }\n\n      return fail(result);\n    }\n\n    // Release the resource back to the pool\n    pool.release(workerHandle);\n\n    // Used for statistics in averageTime and processedWorkCount, which\n    // in turn is used by the /health route.\n    const workEnd = new Date().getTime();\n    const exportTime = workEnd - workStart;\n    timeSpent += exportTime;\n    spentAverage = timeSpent / ++performedExports;\n\n    log(4, `[pool] Work completed in ${exportTime} ms.`);\n\n    // Otherwise return the result\n    return {\n      data: result,\n      options\n    };\n  } catch (error) {\n    fail(`Error trying to perform puppeteer export: ${error}.`);\n  }\n};\n\n/**\n * Gets the pool.\n */\nexport function getPool() {\n  return pool;\n}\n\nexport const getPoolInfoJSON = () => ({\n  min: pool.min,\n  max: pool.max,\n  size: pool.size,\n  available: pool.available,\n  borrowed: pool.borrowed,\n  pending: pool.pending,\n  spareResourceCapacity: pool.spareResourceCapacity\n});\n\n/**\n * Gets the pool's information.\n */\nexport function getPoolInfo() {\n  const {\n    min,\n    max,\n    size,\n    available,\n    borrowed,\n    pending,\n    spareResourceCapacity\n  } = pool;\n\n  log(4, `[pool] The minimum number of resources allowed by pool: ${min}.`);\n  log(4, `[pool] The maximum number of resources allowed by pool: ${max}.`);\n  log(\n    4,\n    `[pool] The number of all resources in pool (free or in use): ${size}.`\n  );\n  log(\n    4,\n    `[pool] The number of resources that are currently available: ${available}.`\n  );\n  log(\n    4,\n    `[pool] The number of resources that are currently acquired: ${borrowed}.`\n  );\n  log(\n    4,\n    `[pool] The number of callers waiting to acquire a resource: ${pending}.`\n  );\n  log(\n    4,\n    `[pool] The number of how many more resources can the pool manage/create: ${spareResourceCapacity}.`\n  );\n}\n\nexport default {\n  init,\n  killPool,\n  postWork,\n  getPool,\n  getPoolInfo,\n  getPoolInfoJSON,\n  workAttempts: () => exportAttempts,\n  droppedWork: () => droppedExports,\n  averageTime: () => spentAverage,\n  processedWorkCount: () => performedExports\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport cache from '../../cache.js';\nimport pool from '../../pool.js';\n\nimport { readFileSync } from 'fs';\nimport { __dirname } from './../../utils.js';\nimport { join as pather } from 'path';\n\nconst pkgFile = JSON.parse(\n    readFileSync(pather(__dirname, 'package.json'))\n  );\n\nconst serverStartTime = new Date();\n\n/**\n * Adds the /health route which outputs basic stats for the server\n */\nexport default (app) =>\n  !app\n    ? false\n    : app.get('/health', (request, response) => {\n        response.send({\n          status: 'OK',\n          bootTime: serverStartTime,\n          uptime:\n            Math.floor(\n              (new Date().getTime() - serverStartTime.getTime()) / 1000 / 60\n            ) + ' minutes',\n          version: pkgFile.version,\n          highchartsVersion: cache.version(),\n          averageProcessingTime: pool.averageTime(),\n          performedExports: pool.processedWorkCount(),\n          failedExports: pool.droppedWork(),\n          exportAttempts: pool.workAttempts(),\n          sucessRatio: (pool.processedWorkCount() / pool.workAttempts()) * 100,\n          // eslint-disable-next-line import/no-named-as-default-member\n          pool: pool.getPoolInfoJSON()\n        });\n      });\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { existsSync, readFileSync, promises as fsPromises } from 'fs';\n\nimport prompts from 'prompts';\n\nimport { log } from './logger.js';\nimport { deepCopy, isObject, printUsage, toBoolean } from './utils.js';\nimport {\n  absoluteProps,\n  defaultConfig,\n  nestedArgs,\n  promptsConfig\n} from './schemas/config.js';\n\nlet generalOptions = {};\n\n/**\n * Getter for the general options.\n *\n * @return {object} - General options object.\n */\nexport const getOptions = () => generalOptions;\n\n/**\n * Initializes and sets the general options for the server instace.\n *\n * @param {object} userOptions - Additional user options (e.g. from the node\n * module usage).\n * @param {string[]} args - CLI arguments.\n * @return {object} - General options object.\n */\nexport const setOptions = (userOptions, args) => {\n  // Only for the CLI usage\n  if (args?.length) {\n    // Get the additional options from the custom JSON file\n    generalOptions = loadConfigFile(args);\n  }\n\n  // Update the default config with a correct option values\n  updateDefaultConfig(defaultConfig, generalOptions);\n\n  // Set values for server's options and returns them\n  generalOptions = initOptions(defaultConfig);\n\n  // Apply user options if there are any\n  if (userOptions) {\n    // Merge user options\n    generalOptions = mergeConfigOptions(\n      generalOptions,\n      userOptions,\n      absoluteProps\n    );\n  }\n\n  // Only for the CLI usage\n  if (args?.length) {\n    // Pair provided arguments\n    generalOptions = pairArgumentValue(generalOptions, args, defaultConfig);\n  }\n\n  // Return final general options\n  return generalOptions;\n};\n\n/**\n * Displays a prompt for the manual configuration.\n *\n * @param {string} configFileName - The name of a configuration file.\n */\nexport const manualConfig = async (configFileName) => {\n  // Prepare a config object\n  let configFile = {};\n\n  // Check if provided config file exists\n  if (existsSync(configFileName)) {\n    configFile = JSON.parse(readFileSync(configFileName, 'utf8'));\n  }\n\n  // Question about a configuration category\n  const onSubmit = async (p, categories) => {\n    let questionsCounter = 0;\n    let allQuestions = [];\n\n    // Create a corresponding property in the manualConfig object\n    for (const section of categories) {\n      // Mark each option with a section\n      promptsConfig[section] = promptsConfig[section].map((option) => ({\n        ...option,\n        section\n      }));\n\n      // Collect the questions\n      allQuestions = [...allQuestions, ...promptsConfig[section]];\n    }\n\n    await prompts(allQuestions, {\n      onSubmit: async (prompt, answer) => {\n        // Get the default modules\n        if (prompt.name === 'modules') {\n          answer = answer.length\n            ? answer.map((module) => prompt.choices[module])\n            : prompt.choices;\n\n          configFile[prompt.section][prompt.name] = answer;\n        } else {\n          configFile[prompt.section] = recursiveProps(\n            Object.assign({}, configFile[prompt.section] || {}),\n            prompt.name.split('.'),\n            answer\n          );\n        }\n\n        if (++questionsCounter === allQuestions.length) {\n          try {\n            await fsPromises.writeFile(\n              configFileName,\n              JSON.stringify(configFile, null, 2),\n              'utf8'\n            );\n          } catch (error) {\n            log(1, `[config] Error while creating config.json: ${error}`);\n          }\n          return true;\n        }\n      }\n    });\n\n    return true;\n  };\n\n  // Find the categories\n  const choices = Object.keys(promptsConfig).map((choice) => ({\n    title: `${choice} options`,\n    value: choice\n  }));\n\n  // Category prompt\n  return prompts(\n    {\n      type: 'multiselect',\n      name: 'category',\n      message: 'Which category do you want to configure?',\n      hint: 'Space: Select specific, A: Select all, Enter: Confirm.',\n      instructions: '',\n      choices\n    },\n    { onSubmit }\n  );\n};\n\n/**\n * Maps the old options to the new config structure.\n *\n * @param {object} oldOptions - Options to be mapped.\n */\nexport const mapToNewConfig = (oldOptions) => {\n  const newOptions = {};\n  // Cycle through old-structured options\n  for (const [key, value] of Object.entries(oldOptions)) {\n    const propertiesChain = nestedArgs[key] ? nestedArgs[key].split('.') : [];\n\n    // Populate object in correct properties levels\n    propertiesChain.reduce(\n      (obj, prop, index) =>\n        (obj[prop] =\n          propertiesChain.length - 1 === index ? value : obj[prop] || {}),\n      newOptions\n    );\n  }\n  return newOptions;\n};\n\n/**\n * Merges the new options to the options object. It omits undefined values.\n *\n * @param {object} options - Old options.\n * @param {object} newOptions - New options.\n * @param {string[]} absoluteProps - Array of object names that should be force\n * merged.\n */\nexport const mergeConfigOptions = (options, newOptions, absoluteProps = []) => {\n  const mergedOptions = deepCopy(options);\n\n  for (const [key, value] of Object.entries(newOptions)) {\n    mergedOptions[key] =\n      isObject(value) &&\n      !absoluteProps.includes(key) &&\n      mergedOptions[key] !== undefined\n        ? mergeConfigOptions(mergedOptions[key], value, absoluteProps)\n        : value !== undefined\n        ? value\n        : mergedOptions[key];\n  }\n\n  return mergedOptions;\n};\n\n/**\n * Initializes options for the `startExport` method by merging user options\n * with the general options.\n *\n * @param {any} exportOptions - User options for exporting.\n * @param {any} generalOptions - General options are used for the export server.\n * @return {object} - User options merged with default options.\n */\nexport const initExportSettings = (exportOptions, generalOptions = {}) => {\n  let options = {};\n\n  if (exportOptions.svg) {\n    options = deepCopy(generalOptions);\n    options.export.type = exportOptions.type || exportOptions.export.type;\n    options.export.scale = exportOptions.scale || exportOptions.export.scale;\n    options.export.outfile =\n      exportOptions.outfile || exportOptions.export.outfile;\n    options.payload = {\n      svg: exportOptions.svg\n    };\n  } else {\n    options = mergeConfigOptions(\n      generalOptions,\n      exportOptions,\n      // Omit going down recursively with the belows\n      absoluteProps\n    );\n  }\n\n  options.export.outfile =\n    options.export?.outfile || `chart.${options.export?.type || 'png'}`;\n  return options;\n};\n\n/**\n * Loads the configuration from a custom JSON file.\n *\n * @param {string[]} args - CLI arguments.\n * @return {object} - Options object from the JSON file.\n */\nfunction loadConfigFile(args) {\n  // Check if the --loadConfig option was used\n  const configIndex = args.findIndex(\n    (arg) => arg.replace(/-/g, '') === 'loadConfig'\n  );\n\n  // Check if the --loadConfig has a value\n  if (configIndex > -1 && args[configIndex + 1]) {\n    const fileName = args[configIndex + 1];\n    try {\n      // Check if an additional config file is a correct JSON file\n      if (fileName && fileName.endsWith('.json')) {\n        // Load an optional custom JSON config file\n        return JSON.parse(readFileSync(fileName));\n      }\n    } catch (error) {\n      log(1, `[config] Unable to load config from the ${fileName}: ${error}`);\n    }\n  }\n\n  // No additional options to return\n  return {};\n}\n\n/**\n * Setting correct values of the options from the default config.\n *\n * @param {object} configObj - The config object based on which the initial\n * configuration be made.\n * @param {object} customObj - The custom object which can contain additional\n * option values to set.\n * @param {string} propChain - Required for creating a string chain of\n * properties for nested arguments.\n */\nfunction updateDefaultConfig(configObj, customObj = {}, propChain = '') {\n  Object.keys(configObj).forEach((key) => {\n    const entry = configObj[key];\n    const customValue = customObj && customObj[key];\n    let numEnvVal;\n\n    if (typeof entry.value === 'undefined') {\n      updateDefaultConfig(entry, customValue, `${propChain}.${key}`);\n    } else {\n      // If a value from a custom JSON exists, it take precedence\n      if (customValue !== undefined) {\n        entry.value = customValue;\n      }\n\n      // If a value from an env variable exists, it take precedence\n      if (entry.envLink) {\n        // Load the env var\n        if (entry.type === 'boolean') {\n          entry.value = toBoolean(\n            [process.env[entry.envLink], entry.value].find(\n              (el) => el || el === 'false'\n            )\n          );\n        } else if (entry.type === 'number') {\n          numEnvVal = +process.env[entry.envLink];\n          entry.value = numEnvVal >= 0 ? numEnvVal : entry.value;\n        } else if (entry.type.indexOf(']') >= 0 && process.env[entry.envLink]) {\n          entry.value = process.env[entry.envLink].split(',');\n        } else {\n          entry.value = process.env[entry.envLink] || entry.value;\n        }\n      }\n    }\n  });\n}\n\n/**\n * Inits options recursively.\n *\n * @param {any} items - Items to update options from.\n * @return {object} - Updated options object.\n */\nfunction initOptions(items) {\n  let options = {};\n  for (const [name, item] of Object.entries(items)) {\n    options[name] = Object.prototype.hasOwnProperty.call(item, 'value')\n      ? item.value\n      : initOptions(item);\n  }\n  return options;\n}\n\n/**\n * Pairs argument with a corresponding value.\n *\n * @param {object} options - All server options.\n * @param {string[]} args - Array of arguments from a user.\n * @param {object} defaultConfig - The default config object.\n */\nfunction pairArgumentValue(options, args, defaultConfig) {\n  for (let i = 0; i < args.length; i++) {\n    let option = args[i].replace(/-/g, '');\n\n    // Find the right place for property's value\n    const propertiesChain = nestedArgs[option]\n      ? nestedArgs[option].split('.')\n      : [];\n\n    propertiesChain.reduce((obj, prop, index) => {\n      if (propertiesChain.length - 1 === index) {\n        // Finds an option and set a corresponding value\n        if (typeof obj[prop] !== 'undefined') {\n          if (args[++i]) {\n            obj[prop] = args[i] || obj[prop];\n          } else {\n            console.log(`Missing argument value for ${option}!`.red, '\\n');\n            options = printUsage(defaultConfig);\n          }\n        }\n      }\n      return obj[prop];\n    }, options);\n  }\n\n  return options;\n}\n\n/**\n * Recursively sets a property in a correct indentation level based on the\n * array of nested properties names.\n *\n * @param {object} objectToUpdate - Object where a property must be set on a\n * correct level.\n * @param  {string[]}nestedNames - Array of nasted names that indicates\n * indentation level.\n * @param {any} value - A value to assign to the property.\n * @return {object} - Updated options object.\n */\nfunction recursiveProps(objectToUpdate, nestedNames, value) {\n  while (nestedNames.length > 1) {\n    const propName = nestedNames.shift();\n\n    // Create a property in object if it doesn't exist\n    if (!Object.prototype.hasOwnProperty.call(objectToUpdate, propName)) {\n      objectToUpdate[propName] = {};\n    }\n\n    // Call function again if there still names to go\n    objectToUpdate[propName] = recursiveProps(\n      Object.assign({}, objectToUpdate[propName]),\n      nestedNames,\n      value\n    );\n\n    return objectToUpdate;\n  }\n\n  // Assign the final value\n  objectToUpdate[nestedNames[0]] = value;\n  return objectToUpdate;\n}\n\nexport default {\n  getOptions,\n  setOptions,\n  manualConfig,\n  mapToNewConfig,\n  mergeConfigOptions,\n  initExportSettings\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { readFile, readFileSync, writeFileSync } from 'fs';\n\nimport { log } from './logger.js';\nimport { killPool, postWork } from './pool.js';\nimport {\n  clearText,\n  fixType,\n  handleResources,\n  isCorrectJSON,\n  optionsStringify,\n  roundNumber,\n  toBoolean,\n  wrapAround\n} from './utils.js';\nimport { initExportSettings, getOptions } from './config.js';\n\nlet allowCodeExecution = false;\n\nexport const startExport = async (settings, endCallback) => {\n  // Starting exporting process message\n  log(4, '[chart] Starting exporting process.');\n\n  // Initialize options\n  const options = initExportSettings(settings, getOptions());\n\n  // Get the export options\n  const exportOptions = options.export;\n\n  // If SVG is an input (argument can be sent only by the request)\n  if (options.payload?.svg && options.payload.svg !== '') {\n    return exportAsString(options.payload.svg.trim(), options, endCallback);\n  }\n\n  // Export using options from the file\n  if (exportOptions.infile && exportOptions.infile.length) {\n    log(4, '[chart] Attempting to export from an input file.');\n\n    // Try to read the file\n    return readFile(exportOptions.infile, 'utf8', (error, infile) => {\n      if (error) {\n        return log(1, `[chart] Error loading input file: ${error}.`);\n      }\n\n      // Get the string representation\n      options.export.instr = infile;\n      return exportAsString(options.export.instr.trim(), options, endCallback);\n    });\n  }\n\n  // Export with options from the raw representation\n  if (\n    (exportOptions.instr && exportOptions.instr !== '') ||\n    (exportOptions.options && exportOptions.options !== '')\n  ) {\n    log(4, '[chart] Attempting to export from a raw input.');\n\n    // Perform a direct inject when forced\n    if (toBoolean(options.customCode?.allowCodeExecution)) {\n      return doStraightInject(options, endCallback);\n    }\n\n    // Either try to parse to JSON first or do the direct export\n    return typeof exportOptions.instr === 'string'\n      ? exportAsString(exportOptions.instr.trim(), options, endCallback)\n      : doExport(\n          options,\n          exportOptions.instr || exportOptions.options,\n          endCallback\n        );\n  }\n\n  // No input specified, pass an error message to the callback\n  log(\n    1,\n    clearText(\n      `[chart] No input specified.\n      ${JSON.stringify(exportOptions, undefined, '  ')}.`\n    )\n  );\n\n  return (\n    endCallback &&\n    endCallback(false, {\n      error: true,\n      message: 'No input specified.'\n    })\n  );\n};\n\nexport const batchExport = (options) => {\n  const batchFunctions = [];\n\n  // Split and pair the --batch arguments\n  for (let pair of options.export.batch.split(';')) {\n    pair = pair.split('=');\n    if (pair.length === 2) {\n      batchFunctions.push(\n        new Promise((resolve, reject) => {\n          startExport(\n            {\n              ...options,\n              export: {\n                ...options.export,\n                infile: pair[0],\n                outfile: pair[1]\n              }\n            },\n            (info, error) => {\n              // Throw an error\n              if (error) {\n                return reject(error);\n              }\n\n              // Save the base64 from a buffer to a correct image file\n              writeFileSync(\n                info.options.export.outfile,\n                Buffer.from(info.data, 'base64')\n              );\n\n              resolve();\n            }\n          );\n        })\n      );\n    }\n  }\n\n  // Kill the pool after all exports are done\n  Promise.all(batchFunctions)\n    .then(() => {\n      killPool();\n    })\n    .catch((error) => {\n      log(1, `[chart] Error encountered during batch export: ${error}`);\n      killPool();\n    });\n};\n\nexport const singleExport = (options) => {\n  // Use instr or its alias, options\n  options.export.instr = options.export.instr || options.export.options;\n\n  // Perform an export\n  startExport(options, (info, error) => {\n    // Exit process when error\n    if (error) {\n      log(1, `[cli] ${error.message}`);\n      process.exit(1);\n    }\n\n    const { outfile, type } = info.options.export;\n\n    // Save the base64 from a buffer to a correct image file\n    writeFileSync(\n      outfile || `chart.${type}`,\n      type !== 'svg' ? Buffer.from(info.data, 'base64') : info.data\n    );\n\n    // Kill the pool\n    killPool();\n  });\n};\n\n/**\n * Function for choosing chart size and scale based on options prioritization.\n *\n * @param {object} options - All options object.\n * @return {object} - An object with updated size and scale for a chart.\n */\nexport const findChartSize = (options) => {\n  const { chart, exporting } =\n    options.export?.options || isCorrectJSON(options.export?.instr);\n\n  // See if globalOptions holds chart or exporting size\n  const globalOptions = isCorrectJSON(options.export?.globalOptions);\n\n  // Secure scale value\n  let scale =\n    options.export?.scale ||\n    exporting?.scale ||\n    globalOptions?.exporting?.scale ||\n    options.export?.defaultScale ||\n    1;\n\n  // the scale cannot be lower than 0.1 and cannot be higher than 5.0\n  scale = Math.max(0.1, Math.min(scale, 5.0));\n\n  // we want to round the numbers like 0.23234 -> 0.23\n  scale = roundNumber(scale, 2);\n\n  // Find chart size and scale\n  const size = {\n    height:\n      options.export?.height ||\n      exporting?.sourceHeight ||\n      chart?.height ||\n      globalOptions?.exporting?.sourceHeight ||\n      globalOptions?.chart?.height ||\n      options.export?.defaultHeight ||\n      400,\n    width:\n      options.export?.width ||\n      exporting?.sourceWidth ||\n      chart?.width ||\n      globalOptions?.exporting?.sourceWidth ||\n      globalOptions?.chart?.width ||\n      options.export?.defaultWidth ||\n      600,\n    scale\n  };\n\n  // Get rid of potential px and %\n  for (var [param, value] of Object.entries(size)) {\n    size[param] =\n      typeof value === 'string' ? +value.replace(/px|%/gi, '') : value;\n  }\n  return size;\n};\n\n/**\n * Function for final options preparation before export.\n *\n * @param {object} options - All options object.\n * @param {object} chartJson - Chart JSON.\n * @param {function} endCallback - The end callback.\n * @param {string} svg - The SVG representation.\n */\nconst doExport = (options, chartJson, endCallback, svg) => {\n  let { export: exportOptions, customCode: customCodeOptions } = options;\n\n  const allowCodeExecutionScoped =\n    typeof customCodeOptions.allowCodeExecution === 'boolean'\n      ? customCodeOptions.allowCodeExecution\n      : allowCodeExecution;\n\n  if (!customCodeOptions) {\n    customCodeOptions = options.customCode = {};\n  } else if (allowCodeExecutionScoped) {\n    if (typeof options.customCode.resources === 'string') {\n      // Process resources\n      options.customCode.resources = handleResources(\n        options.customCode.resources,\n        toBoolean(options.customCode.allowFileResources)\n      );\n    } else if (!options.customCode.resources) {\n      try {\n        const resources = readFileSync('resources.json', 'utf8');\n        options.customCode.resources = handleResources(\n          resources,\n          toBoolean(options.customCode.allowFileResources)\n        );\n      } catch (err) {\n        log(3, `[chart] The default resources.json file not found.`);\n      }\n    }\n  }\n\n  // If the allowCodeExecution flag isn't set, we should refuse the usage\n  // of callback, resources, and custom code. Additionally, the worker will\n  // refuse to run arbitrary JavaScript. Prioritized should be the scoped\n  // option, then we should take a look at the overall pool option.\n  if (!allowCodeExecutionScoped && customCodeOptions) {\n    if (\n      customCodeOptions.callback ||\n      customCodeOptions.resources ||\n      customCodeOptions.customCode\n    ) {\n      // Send back a friendly message saying that the exporter does not support\n      // these settings.\n      return (\n        endCallback &&\n        endCallback(false, {\n          error: true,\n          message: clearText(\n            `The callback, resources and customCode have been disabled for this\n            server.`\n          )\n        })\n      );\n    }\n\n    // Reset all additional custom code\n    customCodeOptions.callback = false;\n    customCodeOptions.resources = false;\n    customCodeOptions.customCode = false;\n  }\n\n  // Clean properties to keep it lean and mean\n  if (chartJson) {\n    chartJson.chart = chartJson.chart || {};\n    chartJson.exporting = chartJson.exporting || {};\n    chartJson.exporting.enabled = false;\n  }\n\n  exportOptions.constr = exportOptions.constr || 'chart';\n  exportOptions.type = fixType(exportOptions.type, exportOptions.outfile);\n  if (exportOptions.type === 'svg') {\n    exportOptions.width = false;\n  }\n\n  // Prepare global and theme options\n  ['globalOptions', 'themeOptions'].forEach((optionsName) => {\n    try {\n      if (exportOptions && exportOptions[optionsName]) {\n        if (\n          typeof exportOptions[optionsName] === 'string' &&\n          exportOptions[optionsName].endsWith('.json')\n        ) {\n          exportOptions[optionsName] = isCorrectJSON(\n            readFileSync(exportOptions[optionsName], 'utf8'),\n            true\n          );\n        } else {\n          exportOptions[optionsName] = isCorrectJSON(\n            exportOptions[optionsName],\n            true\n          );\n        }\n      }\n    } catch (error) {\n      exportOptions[optionsName] = {};\n      log(1, `[chart] The ${optionsName} not found.`);\n    }\n  });\n\n  // Prepare customCode\n  if (customCodeOptions.allowCodeExecution) {\n    customCodeOptions.customCode = wrapAround(\n      customCodeOptions.customCode,\n      customCodeOptions.allowFileResources\n    );\n  }\n\n  // Get the callback\n  if (\n    customCodeOptions &&\n    customCodeOptions.callback &&\n    customCodeOptions.callback?.indexOf('{') < 0\n  ) {\n    // The allowFileResources is always set to false for HTTP requests to avoid\n    // injecting arbitrary files from the fs\n    if (customCodeOptions.allowFileResources) {\n      try {\n        customCodeOptions.callback = readFileSync(\n          customCodeOptions.callback,\n          'utf8'\n        );\n      } catch (error) {\n        log(2, `[chart] Error loading callback: ${error}.`);\n        customCodeOptions.callback = false;\n      }\n    } else {\n      customCodeOptions.callback = false;\n    }\n  }\n\n  // Size search\n  options.export = {\n    ...options.export,\n    ...findChartSize(options)\n  };\n\n  // Post the work to the pool\n  postWork(exportOptions.strInj || chartJson || svg, options)\n    .then((result) => endCallback(result))\n    .catch((error) => {\n      log(0, '[chart] When posting work:', error);\n      return endCallback(false, error);\n    });\n};\n\n/**\n * Function for straight injecting the code.\n * Dangerous and must be used deliberately by someone who sets up a server\n * (see  --allowCodeExecution).\n *\n * @param {object} options - All options object.\n * @param {function} endCallback - The function to call when exporting is done.\n */\nconst doStraightInject = (options, endCallback) => {\n  try {\n    let strInj;\n    let instr = options.export.instr || options.export.options;\n\n    if (typeof instr !== 'string') {\n      // Try to stringify options\n      strInj = instr = optionsStringify(\n        instr,\n        options.customCode?.allowCodeExecution\n      );\n    }\n    strInj = instr.replaceAll(/\\t|\\n|\\r/g, '').trim();\n\n    // Get rid of the ;\n    if (strInj[strInj.length - 1] === ';') {\n      strInj = strInj.substring(0, strInj.length - 1);\n    }\n\n    // Save as stright inject string\n    options.export.strInj = strInj;\n    return doExport(options, false, endCallback);\n  } catch (error) {\n    const message = clearText(\n      `Malformed input detected for ${options.export?.requestId || '?'}:\n      Please make sure that your JSON/JavaScript options\n      are sent using the \"options\" attribute, and that if you're using\n      SVG, it is unescaped.`\n    );\n\n    log(1, message);\n    return (\n      endCallback &&\n      endCallback(\n        false,\n        JSON.stringify({\n          error: true,\n          message\n        })\n      )\n    );\n  }\n};\n\n/**\n * Prepares an input before exporting.\n *\n * @param {string} stringToExport - String representation of SVG/export options.\n * @param {object} options - All options object.\n * @param {function} endCallback - The function to call when exporting is done.\n */\nconst exportAsString = (stringToExport, options, endCallback) => {\n  const { allowCodeExecution } = options.customCode;\n\n  // Check if it is SVG\n  if (\n    stringToExport.indexOf('<svg') >= 0 ||\n    stringToExport.indexOf('<?xml') >= 0\n  ) {\n    log(4, '[chart] Parsing input as SVG.');\n    return doExport(options, false, endCallback, stringToExport);\n  }\n\n  try {\n    // Try to parse to JSON and call the doExport function\n    const chartJSON = JSON.parse(stringToExport.replaceAll(/\\t|\\n|\\r/g, ' '));\n\n    // If a correct JSON, do the export\n    return doExport(options, chartJSON, endCallback);\n  } catch (error) {\n    // Not a valid JSON\n    if (toBoolean(allowCodeExecution)) {\n      return doStraightInject(options, endCallback);\n    } else {\n      // Do not allow straight injection without the allowCodeExecution flag\n      return (\n        endCallback &&\n        endCallback(false, {\n          error: true,\n          message: clearText(\n            `Only JSON configurations and SVG is allowed for this server. If\n            this is your server, JavaScript exporting can be enabled by starting\n            the server with the --allowCodeExecution flag.`\n          )\n        })\n      );\n    }\n  }\n};\n\nexport const getAllowCodeExecution = () => allowCodeExecution;\n\nexport const setAllowCodeExecution = (value) => {\n  allowCodeExecution = toBoolean(value);\n};\n\n/**\n * Starts an exporting process\n *\n * @param {object} settings - Settings for export.\n * @param {function} endCallback - The function to call when exporting is done.\n */\nexport default {\n  batchExport,\n  singleExport,\n  getAllowCodeExecution,\n  setAllowCodeExecution,\n  startExport,\n  findChartSize\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { v4 as uuid } from 'uuid';\n\nimport { getAllowCodeExecution, startExport } from '../../chart.js';\nimport { getOptions, mergeConfigOptions } from '../../config.js';\nimport { log } from '../../logger.js';\nimport {\n  clearText,\n  fixType,\n  isCorrectJSON,\n  isPrivateRangeUrlFound,\n  optionsStringify,\n  measureTime\n} from '../../utils.js';\n\n// Reversed MIME types\nconst reversedMime = {\n  png: 'image/png',\n  jpeg: 'image/jpeg',\n  gif: 'image/gif',\n  pdf: 'application/pdf',\n  svg: 'image/svg+xml'\n};\n\n// The requests counter\nlet requestsCounter = 0;\n\nconst benchmark = false;\n\n// The array of callbacks to call before a request\nconst beforeRequest = [];\n\n// The array of callbacks to call after a request\nconst afterRequest = [];\n\n/**\n * Calls callbacks.\n *\n * @param {Array} callbacks - An array of callbacks.\n * @param {object} request - The request.\n * @param {object} response - The response.\n * @param {object} data - The data to send to callbacks.\n * @return {object} - The result from a callback.\n */\nconst doCallbacks = (callbacks, request, response, data) => {\n  let result = true;\n  const { id, uniqueId, type, body } = data;\n\n  callbacks.some((callback) => {\n    if (callback) {\n      let callResponse = callback(request, response, id, uniqueId, type, body);\n\n      if (callResponse !== undefined && callResponse !== true) {\n        result = callResponse;\n      }\n\n      return true;\n    }\n  });\n\n  return result;\n};\n\n/**\n * Handles an export.\n *\n * @param {object} request - The request.\n * @param {object} response - The response.\n */\nconst exportHandler = (request, response) => {\n  // Start counting time\n  const stopCounter = measureTime();\n\n  // Get the current server's general options\n  const defaultOptions = getOptions();\n\n  // Init default options\n  if (benchmark) {\n    console.log('Init default options:', stopCounter(), 'ms.');\n  }\n\n  const body = request.body;\n  const id = ++requestsCounter;\n  const uniqueId = uuid().replace(/-/g, '');\n  let type = fixType(body.type);\n\n  // Fix type\n  if (benchmark) {\n    console.log('Fix type:', stopCounter(), 'ms.');\n  }\n\n  // Throw 'Bad Request' if there's no body\n  if (!body) {\n    return response.status(400).send(\n      clearText(\n        `Body is required. Sending a body? Make sure your Content-type header\n        is correct. Accepted is application/json and multipart/form-data.`\n      )\n    );\n  }\n\n  // All of the below can be used\n  let instr = isCorrectJSON(body.infile || body.options || body.data);\n\n  // Is correct JSON\n  if (benchmark) {\n    console.log('Is correct JSON:', stopCounter(), 'ms.');\n  }\n\n  // Throw 'Bad Request' if there's no JSON or SVG to export\n  if (!instr && !body.svg) {\n    log(\n      2,\n      clearText(\n        `Request ${uniqueId} from ${\n          request.headers['x-forwarded-for'] || request.connection.remoteAddress\n        } was incorrect. Check your payload.`\n      )\n    );\n\n    return response.status(400).send(\n      clearText(\n        `No correct chart data found. Please make sure you are using\n        application/json or multipart/form-data headers, and that the chart\n        data is in the 'infile', 'options' or 'data' attribute if sending\n        JSON or in the 'svg' if sending SVG.`\n      )\n    );\n  }\n\n  let callResponse = false;\n\n  // Call the before request functions\n  callResponse = doCallbacks(beforeRequest, request, response, {\n    id,\n    uniqueId,\n    type,\n    body\n  });\n\n  // Do callbacks\n  if (benchmark) {\n    console.log('Do callbacks:', stopCounter(), 'ms.');\n  }\n\n  // Block the request if one of a callbacks failed\n  if (callResponse !== true) {\n    return response.send(callResponse);\n  }\n\n  let connectionAborted = false;\n\n  // In case the connection is closed, force to abort further actions\n  request.socket.on('close', () => {\n    connectionAborted = true;\n  });\n\n  log(4, `[export] Got an incoming HTTP request ${uniqueId}.`);\n\n  body.constr = (typeof body.constr === 'string' && body.constr) || 'chart';\n\n  // Gather and organize options from the payload\n  const requestOptions = {\n    export: {\n      instr,\n      type,\n      constr: body.constr[0].toLowerCase() + body.constr.substr(1),\n      height: body.height,\n      width: body.width,\n      scale: body.scale || defaultOptions.export.scale,\n      globalOptions: isCorrectJSON(body.globalOptions, true),\n      themeOptions: isCorrectJSON(body.themeOptions, true)\n    },\n    customCode: {\n      allowCodeExecution: getAllowCodeExecution(),\n      allowFileResources: false,\n      resources: isCorrectJSON(body.resources, true),\n      callback: body.callback,\n      customCode: body.customCode\n    }\n  };\n\n  // Organize options\n  if (benchmark) {\n    console.log('Organize options:', stopCounter(), 'ms.');\n  }\n\n  if (instr) {\n    // Stringify JSON with options\n    requestOptions.export.instr = optionsStringify(\n      instr,\n      requestOptions.customCode.allowCodeExecution\n    );\n\n    // Stringify JSON with options\n    if (benchmark) {\n      console.log('Stringify JSON with options:', stopCounter(), 'ms.');\n    }\n  }\n\n  // Merge the request options into default ones\n  const options = mergeConfigOptions(defaultOptions, requestOptions);\n\n  // Merge config options\n  if (benchmark) {\n    console.log('Merge config options:', stopCounter(), 'ms.');\n  }\n\n  // Save the JSON if exists\n  options.export.options = instr;\n\n  // Lastly, add the server specific arguments into options as payload\n  options.payload = {\n    svg: body.svg || false,\n    b64: body.b64 || false,\n    dataOptions: isCorrectJSON(body.dataOptions, true),\n    noDownload: body.noDownload || false,\n    requestId: uniqueId\n  };\n\n  // Setting payload\n  if (benchmark) {\n    console.log('Setting payload:', stopCounter(), 'ms.');\n  }\n\n  // Test xlink:href elements from payload's SVG\n  if (body.svg && isPrivateRangeUrlFound(options.payload.svg)) {\n    return response\n      .status(400)\n      .send(\n        'SVG potentially contain at least one forbidden URL in xlink:href element.'\n      );\n  }\n\n  // Check URL range\n  if (benchmark) {\n    console.log('Check URL range:', stopCounter(), 'ms.');\n  }\n\n  // Start the export process\n  startExport(options, (info, error) => {\n    // Remove the close event from the socket\n    request.socket.removeAllListeners('close');\n\n    // After Puppeteer exporting\n    if (benchmark) {\n      console.log('After Puppeteer exporting:', stopCounter(), 'ms.', '\\n');\n    }\n\n    // If the connection was closed, do nothing\n    if (connectionAborted) {\n      return log(\n        3,\n        clearText(\n          `[export] The client closed the connection before the chart was done\n          processing.`\n        )\n      );\n    }\n\n    // If error, return it\n    if (error) {\n      log(\n        1,\n        clearText(\n          `[export] Work: ${uniqueId} could not be completed, sending:\n          ${error}`\n        )\n      );\n      return response.status(400).send(error.message);\n    }\n\n    // If data is missing, return the error\n    if (!info || !info.data) {\n      log(\n        1,\n        clearText(\n          `[export] Unexpected return from chart generation, please check your\n          data Request: ${uniqueId} is ${info.data}.`\n        )\n      );\n      return response\n        .status(400)\n        .send(\n          'Unexpected return from chart generation, please check your data.'\n        );\n    }\n\n    // Get the type from options\n    type = info.options.export.type;\n\n    // The after request callbacks\n    doCallbacks(afterRequest, request, response, { id, body: info.data });\n\n    if (info.data) {\n      // If only base64 is required, return it\n      if (body.b64) {\n        // SVG Exception for the Highcharts 11.3.0 version\n        if (type === 'pdf' || type == 'svg') {\n          return response.send(\n            Buffer.from(info.data, 'utf8').toString('base64')\n          );\n        }\n\n        return response.send(info.data);\n      }\n\n      // Set correct content type\n      response.header('Content-Type', reversedMime[type] || 'image/png');\n\n      // Decide whether to download or not chart file\n      if (!body.noDownload) {\n        response.attachment(\n          `${request.params.filename || request.body.filename || 'chart'}.${\n            type || 'png'\n          }`\n        );\n      }\n\n      // If SVG, return plain content\n      return type === 'svg'\n        ? response.send(info.data)\n        : response.send(Buffer.from(info.data, 'base64'));\n    }\n  });\n};\n\nexport default (app) => {\n  app.post('/', exportHandler);\n  app.post('/:filename', exportHandler);\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { promises as fsPromises } from 'fs';\nimport { posix } from 'path';\n\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport express from 'express';\nimport multer from 'multer';\nimport http from 'http';\nimport https from 'https';\n\nimport { log } from '../logger.js';\nimport rateLimit from './rate_limit.js';\nimport { __dirname } from '../utils.js';\n\nimport healthRoute from './routes/health.js';\nimport exportRoutes from './routes/export.js';\nimport vSwitchRoute from './routes/change_hc_version.js';\nimport uiRoute from './routes/ui.js';\n\n// Create express app\nconst app = express();\n\n// Disable the X-Powered-By header\napp.disable('x-powered-by');\n\n// Enable CORS support\napp.use(cors());\n\n// Enable parsing of form data (files) with Multer package\nconst storage = multer.memoryStorage();\nconst upload = multer({\n  storage,\n  limits: {\n    fieldsSize: '50MB'\n  }\n});\n\napp.use(upload.any());\n\n// Enable body parser\napp.use(bodyParser.json({ limit: '50mb' }));\napp.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\napp.use(bodyParser.urlencoded({ extended: false, limit: '50mb' }));\n\n/**\n * Error handler function.\n *\n * @param {object} error - An error object.\n * @return {string} - An error message.\n */\nconst errorHandler = (error) => log(1, `[server] Socket error: ${error}`);\n\n/**\n * Attaches error handlers for a server.\n *\n * @param {object} server - The http/https server.\n */\nconst attachErrorHandlers = (server) => {\n  server.on('clientError', errorHandler);\n  server.on('error', errorHandler);\n  server.on('connection', (socket) =>\n    socket.on('error', (error) => errorHandler(error, socket))\n  );\n};\n\nexport const startServer = async (serverConfig) => {\n  // Stop if not enabled\n  if (!serverConfig.enable) {\n    return false;\n  }\n\n  // // Get the pool\n  // const pool = getPool();\n\n  // // Try to create browser instance before starting the server\n  // const resource = await pool.acquire();\n\n  // // If not found, throw an error\n  // if (!resource.browser) {\n  //   log(1, `[server] Could not acquire browser instance.`);\n  //   process.exit(1);\n  // }\n\n  // // Release the resource\n  // pool.release(resource);\n\n  // Listen HTTP server\n  if (!serverConfig.ssl.enable && !serverConfig.ssl.force) {\n    // Main server instance (HTTP)\n    const httpServer = http.createServer(app);\n    // Attach error handlers and listen to the server\n    attachErrorHandlers(httpServer);\n    // Listen\n    httpServer.listen(serverConfig.port, serverConfig.host);\n\n    log(\n      3,\n      `[server] Started HTTP server on ${serverConfig.host}:${serverConfig.port}.`\n    );\n  }\n\n  // Listen HTTPS server\n  if (serverConfig.ssl.enable) {\n    // Set up an SSL server also\n    let key, cert;\n\n    try {\n      // Get the SSL key\n      key = await fsPromises.readFile(\n        posix.join(serverConfig.ssl.certPath, 'server.key'),\n        'utf8'\n      );\n\n      // Get the SSL certificate\n      cert = await fsPromises.readFile(\n        posix.join(serverConfig.ssl.certPath, 'server.crt'),\n        'utf8'\n      );\n    } catch (error) {\n      log(\n        1,\n        `[server] Unable to load key/certificate from ${serverConfig.ssl.certPath}.`\n      );\n    }\n\n    if (key && cert) {\n      // Main server instance (HTTPS)\n      const httpsServer = https.createServer(app);\n      // Attach error handlers and listen to the server\n      attachErrorHandlers(httpsServer);\n      // Listen\n      httpsServer.listen(serverConfig.ssl.port, serverConfig.host);\n\n      log(\n        3,\n        `[server] Started HTTPS server on ${serverConfig.host}:${serverConfig.ssl.port}.`\n      );\n    }\n  }\n\n  // Enable the rate limiter if config says so\n  if (\n    serverConfig.rateLimiting &&\n    serverConfig.rateLimiting.enable &&\n    ![0, NaN].includes(serverConfig.rateLimiting.maxRequests)\n  ) {\n    rateLimit(app, serverConfig.rateLimiting);\n  }\n\n  // Set up static folder's route\n  app.use(express.static(posix.join(__dirname, 'public')));\n\n  // Set up routes\n  healthRoute(app);\n  exportRoutes(app);\n  uiRoute(app);\n  vSwitchRoute(app);\n};\n\n/**\n * Returns the express instance.\n */\nexport const getExpress = () => {\n  return express;\n};\n\n/**\n * Returns the app instance.\n */\nexport const getApp = () => {\n  return app;\n};\n\n/**\n * Adds a middleware to the server.\n *\n * @param {object} path - An endpoint path to add middlewares to.\n * @param {Array} middlewares - An unlimited number of middlewares to use\n * against the specific endpoint.\n */\nexport const use = (path, ...middlewares) => {\n  app.use(path, ...middlewares);\n};\n\n/**\n * Adds a get route to the server.\n *\n * @param {object} path - An endpoint path to add middlewares to.\n * @param {Array} middlewares - An unlimited number of middlewares to use\n * against the specific endpoint for GET method.\n */\nexport const get = (path, ...middlewares) => {\n  app.get(path, ...middlewares);\n};\n\n/**\n * Adds a post route to the server.\n *\n * @param {object} path - An endpoint path to add middlewares to.\n * @param {Array} middlewares - An unlimited number of middlewares to use\n * against the specific endpoint for POST method.\n */\nexport const post = (path, ...middlewares) => {\n  app.post(path, ...middlewares);\n};\n\n/**\n * Forcefully enables rate limiting.\n *\n * @param {object} limitConfig - The options object for the rate limiter\n * configuration.\n */\nexport const enableRateLimiting = (limitConfig) => {\n  return rateLimit(app, limitConfig);\n};\n\nexport default {\n  startServer,\n  getExpress,\n  getApp,\n  use,\n  get,\n  post,\n  enableRateLimiting\n};\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport { join } from 'path';\n\nimport { __dirname } from '../../utils.js';\n/**\n * Adds the / route for a UI when enabled for the export server\n */\nexport default (app) =>\n  !app\n    ? false\n    : app.get('/', (request, response) => {\n        response.sendFile(join(__dirname, 'public', 'index.html'));\n      });\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\nimport cache from '../../cache.js';\n\n/**\n * Adds a route that can be used to change the HC version on the server\n * TODO: Add auth token and connect to API\n */\nexport default (app) =>\n  !app\n    ? false\n    : app.post('/change_hc_version/:newVersion', async (request, response) => {\n        const ctoken = process.env.HIGHCHARTS_ADMIN_TOKEN;\n\n        if (!ctoken || !ctoken.length) {\n          return response.send({\n            error: true,\n            message:\n              'Server not configured to do run-time version changes: HIGHCHARTS_ADMIN_TOKEN not set'\n          });\n        }\n\n        const token = request.get('hc-auth');\n\n        if (!token || token !== ctoken) {\n          return response.send({\n            error: true,\n            message: 'Invalid or missing token: set token in the hc-auth header'\n          });\n        }\n\n        const newVersion = request.params.newVersion;\n\n        if (newVersion) {\n          try {\n            // eslint-disable-next-line import/no-named-as-default-member\n            await cache.updateVersion(newVersion);\n          } catch (e) {\n            response.send({\n              error: true,\n              message: e\n            });\n          }\n\n          response.send({\n            version: cache.version()\n          });\n        } else {\n          response.send({\n            error: true,\n            message: 'No new version supplied'\n          });\n        }\n      });\n","/*******************************************************************************\n\nHighcharts Export Server\n\nCopyright (c) 2016-2023, Highsoft\n\nLicenced under the MIT licence.\n\nAdditionally a valid Highcharts license is required for use.\n\nSee LICENSE file in root for details.\n\n*******************************************************************************/\n\n// Add the main directory in the global object\nimport 'colors';\n\nimport server, { startServer } from './server/server.js';\nimport {\n  setAllowCodeExecution,\n  batchExport,\n  singleExport,\n  startExport\n} from './chart.js';\nimport { mapToNewConfig, setOptions } from './config.js';\nimport { log, setLogLevel, enableFileLogging } from './logger.js';\nimport { killPool, init } from './pool.js';\nimport { checkCache } from './cache.js';\n\nexport default {\n  log,\n  mapToNewConfig,\n  setOptions,\n  singleExport,\n  startExport,\n  batchExport,\n  server,\n  startServer,\n  killPool,\n  initPool: async (options = {}) => {\n    // Set the allowCodeExecution per export module scope\n    setAllowCodeExecution(\n      options.customCode && options.customCode.allowCodeExecution\n    );\n\n    // Set the log level\n    setLogLevel(options.logging && parseInt(options.logging.level));\n\n    // Set the log file path and name\n    if (options.logging && options.logging.dest) {\n      enableFileLogging(\n        options.logging.dest,\n        options.logging.file || 'highcharts-export-server.log'\n      );\n    }\n\n    // Check if cache needs to be updated\n    await checkCache(options.highcharts || { version: 'latest' });\n\n    // Init the pool\n    await init({\n      pool: options.pool || {\n        minWorkers: 1,\n        maxWorkers: 1\n      },\n      puppeteerArgs: options.puppeteer?.args || []\n    });\n\n    // Return updated options\n    return options;\n  }\n};\n"],"names":["dotenv","config","defaultConfig","puppeteer","args","value","type","description","highcharts","version","envLink","cdnURL","coreScripts","modules","indicators","scripts","forceFetch","export","infile","instr","options","outfile","constr","defaultHeight","defaultWidth","defaultScale","height","width","scale","globalOptions","themeOptions","batch","rasterizationTimeout","customCode","allowCodeExecution","allowFileResources","callback","resources","loadConfig","createConfig","server","enable","cliName","host","port","ssl","force","certPath","rateLimiting","maxRequests","window","delay","trustProxy","skipKey","skipToken","pool","minWorkers","maxWorkers","workLimit","acquireTimeout","createTimeout","destroyTimeout","idleTimeout","createRetryInterval","reaperInterval","benchmarking","listenToProcessExits","logging","level","file","dest","ui","route","other","noLogo","payload","join","absoluteProps","nestedArgs","createNestedArgs","obj","propChain","Object","keys","forEach","k","includes","entry","substring","toConsole","toFile","pathCreated","levelsDesc","title","color","listeners","key","option","entries","log","newLevel","texts","length","prefix","Date","toString","split","trim","fn","existsSync","mkdirSync","appendFile","concat","error","console","apply","undefined","__dirname","fileURLToPath","URL","url","clearText","text","rule","replacer","replaceAll","fixType","formats","outType","pop","find","t","handleResources","allowedProps","handledResources","correctResources","endsWith","isCorrectJSON","readFileSync","notice","files","propName","map","item","data","parsedData","JSON","parse","stringify","deepCopy","copy","Array","isArray","prototype","hasOwnProperty","call","optionsStringify","allowFunctions","name","startsWith","printUsage","bold","yellow","cycleCategories","categories","descName","green","i","blue","category","toUpperCase","red","toBoolean","wrapAround","replace","rateLimit","app","limitConfig","msg","rateOptions","max","limiter","windowMs","delayMs","handler","request","response","format","json","status","send","message","default","skip","query","access_token","use","async","fetch","requestOptions","Promise","resolve","reject","protocol","https","http","getProtocol","get","res","on","chunk","cachePath","cache","activeManifest","sources","hcVersion","appliedConfig","extractVersion","substr","indexOf","fetchScript","script","proxyAgent","agent","timeout","process","env","statusCode","updateCache","sourcePath","customScripts","allScripts","c","m","proxyHost","proxyPort","HttpsProxyAgent","fetchedModules","all","writeFileSync","checkCache","manifestPath","requestUpdate","manifest","moduleMap","numberOfModules","some","moduleName","newManifest","saveConfigToManifest","cache$1","newVersion","assign","RANDOM_PID","randomBytes","PUPPETEER_DIR","path","minimalArgs","template","fs","browser","setPageContent","page","setContent","addScriptTag","evaluate","setupHighcharts","err","$eval","element","errorMessage","_displayErrors","innerHTML","newPage","setCacheEnabled","clearPage","hardReset","goto","body","close","connected","__basedir","setAsConfig","chart","triggerExport","puppeteerExport","injectedResources","clearInjected","dispose","scriptsToRemove","document","getElementsByTagName","stylesToRemove","linksToRemove","remove","exportBench","exportOptions","requestAnimationFrame","displayErrors","debugger","d","svgBench","isSVG","setPageBench","svgTemplate","strInj","setContentBench","resBench","js","push","content","isLocal","cssBench","css","cssImports","match","cssImportPath","addStyleTag","size","chartHeight","baseVal","chartWidth","parseFloat","Highcharts","charts","vpBench","viewportHeight","Math","ceil","viewportWidth","setViewport","deviceScaleFactor","zoomCallback","style","zoom","margin","x","y","getBoundingClientRect","trunc","getClipRegion","round","expBenchmark","outerHTML","createSVG","encoding","clip","race","screenshot","omitBackground","_resolve","setTimeout","Error","createImage","pdf","createPDF","oldCharts","oldChart","destroy","shift","puppeteerArgs","performedExports","exportAttempts","timeSpent","droppedExports","spentAverage","poolConfig","factory","create","id","uuid","s","getTime","browserNewPage","isClosed","workCount","random","validate","workerHandle","logLevel","init","allArgs","tryCount","open","launch","headless","userDataDir","e","createBrowser","killPool","code","exit","parseInt","Pool","min","acquireTimeoutMillis","createTimeoutMillis","destroyTimeoutMillis","idleTimeoutMillis","createRetryIntervalMillis","reapIntervalMillis","propagateCreateError","eventId","resource","initialResources","acquire","promise","release","destroyed","postWork","fail","getPoolInfo","workStart","result","exportTime","available","borrowed","pending","spareResourceCapacity","pool$1","pkgFile","pather","serverStartTime","generalOptions","getOptions","mergeConfigOptions","newOptions","mergedOptions","updateDefaultConfig","configObj","customObj","customValue","numEnvVal","el","initOptions","items","startExport","settings","endCallback","svg","initExportSettings","exportAsString","readFile","doStraightInject","doExport","findChartSize","exporting","precision","multiplier","pow","roundNumber","sourceHeight","sourceWidth","param","chartJson","customCodeOptions","allowCodeExecutionScoped","enabled","optionsName","then","catch","requestId","stringToExport","chartJSON","reversedMime","png","jpeg","gif","requestsCounter","beforeRequest","afterRequest","doCallbacks","callbacks","uniqueId","callResponse","exportHandler","start","hrtime","bigint","measureTime","defaultOptions","headers","connection","remoteAddress","connectionAborted","socket","toLowerCase","b64","dataOptions","noDownload","ipRegEx","info","removeAllListeners","Buffer","from","header","attachment","params","filename","express","disable","cors","storage","multer","memoryStorage","upload","limits","fieldsSize","any","bodyParser","limit","urlencoded","extended","errorHandler","attachErrorHandlers","startServer","serverConfig","httpServer","createServer","listen","cert","fsPromises","posix","httpsServer","NaN","static","bootTime","uptime","floor","highchartsVersion","averageProcessingTime","failedExports","sucessRatio","healthRoute","post","exportRoutes","sendFile","uiRoute","ctoken","HIGHCHARTS_ADMIN_TOKEN","token","vSwitchRoute","getExpress","getApp","middlewares","enableRateLimiting","index","mapToNewConfig","oldOptions","propertiesChain","reduce","prop","setOptions","userOptions","configIndex","findIndex","arg","fileName","loadConfigFile","pairArgumentValue","singleExport","batchExport","batchFunctions","pair","initPool","logDest","logFile","enableFileLogging"],"mappings":"snBAiBAA,EAAOC,SAIA,MAAMC,EAAgB,CAC3BC,UAAW,CACTC,KAAM,CACJC,MAAO,GACPC,KAAM,WACNC,YAAa,6CAGjBC,WAAY,CACVC,QAAS,CACPJ,MAAO,SACPK,QAAS,qBACTJ,KAAM,SACNC,YAAa,8BAEfI,OAAQ,CACNN,MAAO,+BACPK,QAAS,iBACTJ,KAAM,SACNC,YAAa,6CAEfK,YAAa,CACXF,QAAS,0BACTL,MAAO,CAAC,aAAc,kBAAmB,iBACzCC,KAAM,WACNC,YAAa,qCAEfM,QAAS,CACPH,QAAS,qBACTL,MAAO,CACL,QACA,MACA,QACA,YACA,cACA,uBACA,gBACA,uBACA,eACA,QACA,OACA,mBACA,eACA,cACA,UACA,UACA,WACA,UACA,YACA,cACA,YACA,sBACA,SACA,SACA,WACA,YACA,eACA,SACA,eACA,YACA,kBACA,SACA,cACA,mBACA,eACA,cACA,eACA,cACA,cACA,WACA,eACA,WACA,SACA,OACA,WACA,YACA,SACA,qBACA,aACA,WACA,WACA,WACA,WACA,eACA,UACA,kBACA,oBACA,cAEFC,KAAM,WACNC,YAAa,gCAEfO,WAAY,CACVJ,QAAS,wBACTL,MAAO,CAAC,kBACRC,KAAM,WACNC,YAAa,mCAEfQ,QAAS,CACPV,MAAO,CACL,wEACA,kGAEFC,KAAM,WACNC,YACE,qEAEJS,WAAY,CACVN,QAAS,yBACTL,OAAO,EACPC,KAAM,UACNC,YACE,oEAGNU,OAAQ,CACNC,OAAQ,CACNb,OAAO,EACPC,KAAM,SACNC,YACE,8FAEJY,MAAO,CACLd,OAAO,EACPC,KAAM,SACNC,YACE,iFAEJa,QAAS,CACPf,OAAO,EACPC,KAAM,SACNC,YAAa,oCAEfc,QAAS,CACPhB,OAAO,EACPC,KAAM,SACNC,YACE,2FAEJD,KAAM,CACJI,QAAS,sBACTL,MAAO,MACPC,KAAM,SACNC,YACE,sEAEJe,OAAQ,CACNZ,QAAS,wBACTL,MAAO,QACPC,KAAM,SACNC,YACE,6EAEJgB,cAAe,CACbb,QAAS,wBACTL,MAAO,IACPC,KAAM,SACNC,YACE,gFAEJiB,aAA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"}