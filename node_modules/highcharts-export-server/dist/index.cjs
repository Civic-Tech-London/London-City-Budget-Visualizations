"use strict";require("colors");var e=require("fs"),t=require("path"),r=require("body-parser"),o=require("cors"),i=require("express"),n=require("multer"),s=require("http"),a=require("https"),l=require("dotenv"),c=require("express-rate-limit"),p=require("url"),d=require("https-proxy-agent"),u=require("uuid"),h=require("tarn"),g=require("puppeteer"),m=require("node:path"),f=require("node:crypto");require("prompts");var v="undefined"!=typeof document?document.currentScript:null;function y(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var o=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,o.get?o:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var b=y(p);l.config();const w={puppeteer:{args:{value:[],type:"string[]",description:"Array of arguments to send to puppeteer."}},highcharts:{version:{value:"latest",envLink:"HIGHCHARTS_VERSION",type:"string",description:"Highcharts version to use."},cdnURL:{value:"https://code.highcharts.com/",envLink:"HIGHCHARTS_CDN",type:"string",description:"The CDN URL of Highcharts scripts to use."},coreScripts:{envLink:"HIGHCHARTS_CORE_SCRIPTS",value:["highcharts","highcharts-more","highcharts-3d"],type:"string[]",description:"Highcharts core scripts to fetch."},modules:{envLink:"HIGHCHARTS_MODULES",value:["stock","map","gantt","exporting","export-data","parallel-coordinates","accessibility","annotations-advanced","boost-canvas","boost","data","draggable-points","static-scale","broken-axis","heatmap","tilemap","timeline","treemap","treegraph","item-series","drilldown","histogram-bellcurve","bullet","funnel","funnel3d","pyramid3d","networkgraph","pareto","pattern-fill","pictorial","price-indicator","sankey","arc-diagram","dependency-wheel","series-label","solid-gauge","sonification","stock-tools","streamgraph","sunburst","variable-pie","variwide","vector","venn","windbarb","wordcloud","xrange","no-data-to-display","drag-panes","debugger","dumbbell","lollipop","cylinder","organization","dotplot","marker-clusters","hollowcandlestick","heikinashi"],type:"string[]",description:"Highcharts modules to fetch."},indicators:{envLink:"HIGHCHARTS_INDICATORS",value:["indicators-all"],type:"string[]",description:"Highcharts indicators to fetch."},scripts:{value:["https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js","https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js"],type:"string[]",description:"Additional direct scripts/optional dependencies (e.g. moment.js)."},forceFetch:{envLink:"HIGHCHARTS_FORCE_FETCH",value:!1,type:"boolean",description:"Should all the scripts be refetched after rerunning the server."}},export:{infile:{value:!1,type:"string",description:"The input file name along with a type (json or svg). It can be a correct JSON or SVG file."},instr:{value:!1,type:"string",description:"An input in a form of a stringified JSON or SVG file. Overrides the --infile."},options:{value:!1,type:"string",description:"An alias for the --instr option."},outfile:{value:!1,type:"string",description:"The output filename along with a type (jpeg, png, pdf or svg). Ignores the --type flag."},type:{envLink:"EXPORT_DEFAULT_TYPE",value:"png",type:"string",description:"The format of the file to export to. Can be jpeg, png, pdf or svg."},constr:{envLink:"EXPORT_DEFAULT_CONSTR",value:"chart",type:"string",description:"The constructor to use. Can be chart, stockChart, mapChart or ganttChart."},defaultHeight:{envLink:"EXPORT_DEFAULT_HEIGHT",value:400,type:"number",description:"The default height of the exported chart. Used when not found any value set."},defaultWidth:{envLink:"EXPORT_DEFAULT_WIDTH",value:600,type:"number",description:"The default width of the exported chart. Used when not found any value set."},defaultScale:{envLink:"EXPORT_DEFAULT_SCALE",value:1,type:"number",description:"The default scale of the exported chart. Ranges between 1 and 5."},height:{type:"number",value:!1,description:"The default height of the exported chart. Overrides the option in the chart settings."},width:{type:"number",value:!1,description:"The width of the exported chart. Overrides the option in the chart settings."},scale:{value:!1,type:"number",description:"The scale of the exported chart. Ranges between 1 and 5."},globalOptions:{value:!1,type:"string",description:"A stringified JSON or a filename with options to be passed into the Highcharts.setOptions."},themeOptions:{value:!1,type:"string",description:"A stringified JSON or a filename with theme options to be passed into the Highcharts.setOptions."},batch:{value:!1,type:"string",description:'Starts a batch job. A string that contains input/output pairs: "in=out;in=out;..".'},rasterizationTimeout:{envLink:"EXPORT_RASTERIZATION_TIMEOUT",value:1500,type:"number",description:"The number of milliseconds to wait for rendering a webpage."}},customCode:{allowCodeExecution:{envLink:"HIGHCHARTS_ALLOW_CODE_EXECUTION",value:!1,type:"boolean",description:"If set to true, allow for the execution of arbitrary code when exporting."},allowFileResources:{envLink:"HIGHCHARTS_ALLOW_FILE_RESOURCES",value:!0,type:"boolean",description:"Allow injecting resources from the filesystem. Has no effect when running as a server."},customCode:{value:!1,type:"string",description:"A function to be called before chart initialization. Can be a filename with the js extension."},callback:{value:!1,type:"string",description:"A JavaScript file with a function to run on construction."},resources:{value:!1,type:"string",description:"An additional resource in a form of stringified JSON. It can contain files, js and css sections."},loadConfig:{value:!1,type:"string",description:"A file that contains a pre-defined config to use."},createConfig:{value:!1,type:"string",description:"Allows to set options through a prompt and save in a provided config file."}},server:{enable:{envLink:"HIGHCHARTS_SERVER_ENABLE",value:!1,type:"boolean",cliName:"enableServer",description:"If set to true, starts a server on 0.0.0.0."},host:{envLink:"HIGHCHARTS_SERVER_HOST",value:"0.0.0.0",type:"string",description:"The hostname of the server. Also starts a server listening on the supplied hostname."},port:{envLink:"HIGHCHARTS_SERVER_PORT",value:7801,type:"number",description:"The port to use for the server. Defaults to 7801."},ssl:{enable:{envLink:"HIGHCHARTS_SERVER_SSL_ENABLE",value:!1,type:"boolean",cliName:"enableSsl",description:"Enables the SSL protocol."},force:{envLink:"HIGHCHARTS_SERVER_SSL_FORCE",value:!1,type:"boolean",cliName:"sslForced",description:"If set to true, forces the server to only serve over HTTPS."},port:{envLink:"HIGHCHARTS_SERVER_SSL_PORT",value:443,type:"number",cliName:"sslPort",description:"The port on which to run the SSL server."},certPath:{envLink:"HIGHCHARTS_SSL_CERT_PATH",value:"",type:"string",description:"The path to the SSL certificate/key."}},rateLimiting:{enable:{envLink:"HIGHCHARTS_RATE_LIMIT_ENABLE",value:!1,type:"boolean",cliName:"enableRateLimiting",description:"Enables rate limiting."},maxRequests:{envLink:"HIGHCHARTS_RATE_LIMIT_MAX",value:10,type:"number",description:"Max requests allowed in a one minute."},window:{envLink:"HIGHCHARTS_RATE_LIMIT_WINDOW",value:1,type:"number",description:"The time window in minutes for rate limiting."},delay:{envLink:"HIGHCHARTS_RATE_LIMIT_DELAY",value:0,type:"number",description:"The amount to delay each successive request before hitting the max."},trustProxy:{envLink:"HIGHCHARTS_RATE_LIMIT_TRUST_PROXY",value:!1,type:"boolean",description:"Set this to true if behind a load balancer."},skipKey:{envLink:"HIGHCHARTS_RATE_LIMIT_SKIP_KEY",value:"",type:"number|string",description:"Allows bypassing the rate limiter and should be provided with skipToken argument."},skipToken:{envLink:"HIGHCHARTS_RATE_LIMIT_SKIP_TOKEN",value:"",type:"number|string",description:"Allows bypassing the rate limiter and should be provided with skipKey argument."}}},pool:{minWorkers:{envLink:"HIGHCHARTS_POOL_MIN_WORKERS",value:4,type:"number",description:"The number of initial workers to spawn."},maxWorkers:{envLink:"HIGHCHARTS_POOL_MAX_WORKERS",value:8,type:"number",description:"The number of max workers to spawn."},workLimit:{envLink:"HIGHCHARTS_POOL_WORK_LIMIT",value:40,type:"number",description:"The pieces of work that can be performed before restarting process."},acquireTimeout:{envLink:"HIGHCHARTS_POOL_ACQUIRE_TIMEOUT",value:5e3,type:"number",description:"The number of milliseconds to wait for acquiring a resource."},createTimeout:{envLink:"HIGHCHARTS_POOL_CREATE_TIMEOUT",value:5e3,type:"number",description:"The number of milliseconds to wait for creating a resource."},destroyTimeout:{envLink:"HIGHCHARTS_POOL_DESTROY_TIMEOUT",value:5e3,type:"number",description:"The number of milliseconds to wait for destroying a resource."},idleTimeout:{envLink:"HIGHCHARTS_POOL_IDLE_TIMEOUT",value:3e4,type:"number",description:"The number of milliseconds after an idle resource is destroyed."},createRetryInterval:{envLink:"HIGHCHARTS_POOL_CREATE_RETRY_INTERVAL",value:200,type:"number",description:"The number of milliseconds after the create process is retried in case of fail."},reaperInterval:{envLink:"HIGHCHARTS_POOL_REAPER_INTERVAL",value:1e3,type:"number",description:"The number of milliseconds after the check for idle resources to destroy is triggered."},benchmarking:{envLink:"HIGHCHARTS_POOL_BENCHMARKING",value:!1,type:"boolean",description:"Enable benchmarking."},listenToProcessExits:{envLink:"HIGHCHARTS_POOL_LISTEN_TO_PROCESS_EXITS",value:!0,type:"boolean",description:"Set to false in order to skip attaching process.exit handlers."}},logging:{level:{envLink:"HIGHCHARTS_LOG_LEVEL",value:4,type:"number",cliName:"logLevel",description:"The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose)."},file:{envLink:"HIGHCHARTS_LOG_FILE",value:"highcharts-export-server.log",type:"string",cliName:"logFile",description:"A name of a log file. The --logDest also needs to be set to enable file logging."},dest:{envLink:"HIGHCHARTS_LOG_DEST",value:"log/",type:"string",cliName:"logDest",description:"The path to store log files. Also enables file logging."}},ui:{enable:{envLink:"HIGHCHARTS_UI_ENABLE",value:!1,type:"boolean",cliName:"enableUi",description:"Enables the UI for the export server."},route:{envLink:"HIGHCHARTS_UI_ROUTE",value:"/",type:"string",cliName:"uiRoute",description:"The route to attach the UI to."}},other:{noLogo:{envLink:"HIGHCHARTS_NO_LOGO",value:!1,type:"boolean",description:"Skip printing the logo on a startup. Will be replaced by a simple text."}},payload:{}};w.puppeteer.args.value.join(","),w.highcharts.version.value,w.highcharts.cdnURL.value,w.highcharts.modules.value,w.highcharts.scripts.value.join(","),w.highcharts.forceFetch.value,w.export.type.value,w.export.constr.value,w.export.defaultHeight.value,w.export.defaultWidth.value,w.export.defaultScale.value,w.export.rasterizationTimeout.value,w.customCode.allowCodeExecution.value,w.customCode.allowFileResources.value,w.server.enable.value,w.server.host.value,w.server.port.value,w.server.ssl.enable.value,w.server.ssl.force.value,w.server.ssl.port.value,w.server.ssl.certPath.value,w.server.rateLimiting.enable.value,w.server.rateLimiting.maxRequests.value,w.server.rateLimiting.window.value,w.server.rateLimiting.delay.value,w.server.rateLimiting.trustProxy.value,w.server.rateLimiting.skipKey.value,w.server.rateLimiting.skipToken.value,w.pool.minWorkers.value,w.pool.maxWorkers.value,w.pool.workLimit.value,w.pool.acquireTimeout.value,w.pool.createTimeout.value,w.pool.destroyTimeout.value,w.pool.idleTimeout.value,w.pool.createRetryInterval.value,w.pool.reaperInterval.value,w.pool.benchmarking.value,w.pool.listenToProcessExits.value,w.logging.level.value,w.logging.file.value,w.logging.dest.value,w.ui.enable.value,w.ui.route.value,w.other.noLogo.value;const T=["options","globalOptions","themeOptions","resources","payload"],x={},k=(e,t="")=>{Object.keys(e).forEach((r=>{if(!["puppeteer","highcharts"].includes(r)){const o=e[r];void 0===o.value?k(o,`${t}.${r}`):x[o.cliName||r]=`${t}.${r}`.substring(1)}}))};k(w);let S={toConsole:!0,toFile:!1,pathCreated:!1,levelsDesc:[{title:"error",color:"red"},{title:"warning",color:"yellow"},{title:"notice",color:"blue"},{title:"verbose",color:"gray"}],listeners:[]};for(const[e,t]of Object.entries(w.logging))S[e]=t.value;const R=(...t)=>{const[r,...o]=t,{level:i,levelsDesc:n}=S;if(0===r||r>i||i>n.length)return;const s=`${(new Date).toString().split("(")[0].trim()} [${n[r-1].title}] -`;S.listeners.forEach((e=>{e(s,o.join(" "))})),S.toFile&&(S.pathCreated||(!e.existsSync(S.dest)&&e.mkdirSync(S.dest),S.pathCreated=!0),e.appendFile(`${S.dest}${S.file}`,[s].concat(o).join(" ")+"\n",(e=>{e&&(console.log(`[logger] Unable to write to log file: ${e}`),S.toFile=!1)}))),S.toConsole&&console.log.apply(void 0,[s.toString()[S.levelsDesc[r-1].color]].concat(o))},H=p.fileURLToPath(new URL("../.","undefined"==typeof document?require("url").pathToFileURL(__filename).href:v&&v.src||new URL("index.cjs",document.baseURI).href)),E=(e,t=/\s\s+/g,r=" ")=>e.replaceAll(t,r).trim(),L=(e,t)=>{const r=["png","jpeg","pdf","svg"];if(t){const o=t.split(".").pop();r.includes(o)&&e!==o&&(e=o)}return{"image/png":"png","image/jpeg":"jpeg","application/pdf":"pdf","image/svg+xml":"svg"}[e]||r.find((t=>t===e))||"png"},O=(t=!1,r)=>{const o=["js","css","files"];let i=t,n=!1;if(r&&t.endsWith(".json"))try{t?t&&t.endsWith(".json")?i=C(e.readFileSync(t,"utf8")):(i=C(t),!0===i&&(i=C(e.readFileSync("resources.json","utf8")))):i=C(e.readFileSync("resources.json","utf8"))}catch(e){return R(3,"[cli] No resources found.")}else i=C(t),r||delete i.files;for(const e in i)o.includes(e)?n||(n=!0):delete i[e];return n?(i.files&&(i.files=i.files.map((e=>e.trim())),(!i.files||i.files.length<=0)&&delete i.files),i):R(3,"[cli] No resources found.")};function C(e,t){try{const r=JSON.parse("string"!=typeof e?JSON.stringify(e):e);return"string"!=typeof r&&t?JSON.stringify(r):r}catch(e){return!1}}const _=e=>{if(null===e||"object"!=typeof e)return e;const t=Array.isArray(e)?[]:{};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=_(e[r]));return t},I=(e,t)=>JSON.stringify(e,((e,r)=>("string"==typeof r&&((r=r.trim()).startsWith("function(")||r.startsWith("function ("))&&r.endsWith("}")&&(r=t?`EXP_FUN${(r+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:void 0),"function"==typeof r?`EXP_FUN${(r+"").replaceAll(/\n|\t|\r/g," ")}EXP_FUN`:r))).replaceAll(/"EXP_FUN|EXP_FUN"/g,"");function A(){console.log("Usage of CLI arguments:".bold,"\n------",`\nFor more detailed information visit readme at: ${"https://github.com/highcharts/node-export-server#readme".bold.yellow}.`);const e=t=>{for(const[r,o]of Object.entries(t))if(Object.prototype.hasOwnProperty.call(o,"value")){let e=`  --${o.cliName||r} ${("<"+o.type+">").green} `;if(e.length<48)for(let t=e.length;t<48;t++)e+=".";console.log(e,o.description,`[Default: ${o.value.toString().bold}]`.blue)}else e(o)};Object.keys(w).forEach((t=>{["puppeteer","highcharts"].includes(t)||(console.log(`\n${t.toUpperCase()}`.red),e(w[t]))})),console.log("\n")}const $=e=>!["false","undefined","null","NaN","0",""].includes(e)&&!!e,j=(t,r)=>{if(t&&"string"==typeof t)return(t=t.trim()).endsWith(".js")?!!r&&j(e.readFileSync(t,"utf8")):t.startsWith("function()")||t.startsWith("function ()")||t.startsWith("()=>")||t.startsWith("() =>")?`(${t})()`:t.replace(/;$/,"")};var P=(e,t)=>{const r="Too many requests, you have been rate limited. Please try again later.",o={max:t.maxRequests||30,window:t.window||1,delay:t.delay||0,trustProxy:t.trustProxy||!1,skipKey:t.skipKey||!1,skipToken:t.skipToken||!1};o.trustProxy&&e.enable("trust proxy");const i=c({windowMs:60*o.window*1e3,max:o.max,delayMs:o.delay,handler:(e,t)=>{t.format({json:()=>{t.status(429).send({message:r})},default:()=>{t.status(429).send(r)}})},skip:e=>!1!==o.skipKey&&!1!==o.skipToken&&e.query.key===o.skipKey&&e.query.access_token===o.skipToken&&(R(4,"[rate-limiting] Skipping rate limiter."),!0)});e.use(i),R(3,E(`[rate-limiting] Enabled rate limiting: ${o.max} requests\n      per ${o.window} minute per IP, trusting proxy:\n      ${o.trustProxy}.`))};async function N(e,t={}){return new Promise(((r,o)=>{const i=(e=>e.startsWith("https")?a:s)(e);i.get(e,t,(e=>{let t="";e.on("data",(e=>{t+=e})),e.on("end",(()=>{t||o("Nothing was fetched from the URL."),e.text=t,r(e)}))})).on("error",(e=>{o(e)}))}))}l.config();const F=t.join(H,".cache"),U={cdnURL:"https://code.highcharts.com/",activeManifest:{},sources:"",hcVersion:""};let q=!1;const G=()=>U.hcVersion=U.sources.substr(0,U.sources.indexOf("*/")).replace("/*","").replace("*/","").replace(/\n/g,"").trim(),W=async(e,t)=>{try{e.endsWith(".js")&&(e=e.substring(0,e.length-3)),R(4,`[cache] Fetching script - ${e}.js`);const r=t?{agent:t,timeout:+process.env.PROXY_SERVER_TIMEOUT||5e3}:{},o=await N(`${e}.js`,r);if(200===o.statusCode)return o.text;throw`${o.statusCode}`}catch(t){throw R(1,`[cache] Error fetching script ${e}.js: ${t}.`),t}},M=async(t,r)=>{const{coreScripts:o,modules:i,indicators:n,scripts:s}=t,a="latest"!==t.version&&t.version?`${t.version}/`:"";R(3,"[cache] Updating cache to Highcharts ",a);const l=[...o.map((e=>`${a}${e}`)),...i.map((e=>"map"===e?`maps/${a}modules/${e}`:`${a}modules/${e}`)),...n.map((e=>`stock/${a}indicators/${e}`))];let c;const p=process.env.PROXY_SERVER_HOST,u=process.env.PROXY_SERVER_PORT;p&&u&&(c=new d({host:p,port:+u}));const h={};try{return U.sources=(await Promise.all([...l.map((async e=>{const r=await W(`${t.cdnURL||U.cdnURL}${e}`,c);return"string"==typeof r&&(h[e.replace(/(.*)\/|(.*)modules\/|stock\/(.*)indicators\/|maps\/(.*)modules\//gi,"")]=1),r})),...s.map((e=>W(e,c)))])).join(";\n"),G(),e.writeFileSync(r,U.sources),h}catch(e){R(1,"[cache] Unable to update local Highcharts cache.")}},D=async r=>{let o;const i=t.join(F,"manifest.json"),n=t.join(F,"sources.js");if(q=r,!e.existsSync(F)&&e.mkdirSync(F),!e.existsSync(i)||r.forceFetch)R(3,"[cache] Fetching and caching Highcharts dependencies."),o=await M(r,n);else{let t=!1;const s=JSON.parse(e.readFileSync(i));if(s.modules&&Array.isArray(s.modules)){const e={};s.modules.forEach((t=>e[t]=1)),s.modules=e}const{modules:a,coreScripts:l,indicators:c}=r,p=a.length+l.length+c.length;s.version!==r.version?(R(3,"[cache] Highcharts version mismatch in cache, need to re-fetch."),t=!0):Object.keys(s.modules||{}).length!==p?(R(3,"[cache] Cache and requested modules does not match, need to re-fetch."),t=!0):t=(r.modules||[]).some((e=>{if(!s.modules[e])return R(3,`[cache] The ${e} missing in cache, need to re-fetch.`),!0})),t?o=await M(r,n):(R(3,"[cache] Dependency cache is up to date, proceeding."),U.sources=e.readFileSync(n,"utf8"),o=s.modules,G())}await(async(r,o)=>{const i={version:r.version,modules:o||{}};U.activeManifest=i,R(4,"[cache] writing new manifest");try{e.writeFileSync(t.join(F,"manifest.json"),JSON.stringify(i),"utf8")}catch(e){R(1,`[cache] Error writing cache manifest: ${e}.`)}})(r,o)};var V=async e=>!!q&&await D(Object.assign(q,{version:e})),J=()=>U,z=()=>U.hcVersion;const X=f.randomBytes(64).toString("base64url"),K=m.join("tmp",`puppeteer-${X}`),B=[`--user-data-dir=${m.join(K,"profile")}`,"--autoplay-policy=user-gesture-required","--disable-background-networking","--disable-background-timer-throttling","--disable-backgrounding-occluded-windows","--disable-breakpad","--disable-client-side-phishing-detection","--disable-component-update","--disable-default-apps","--disable-dev-shm-usage","--disable-domain-reliability","--disable-extensions","--disable-features=AudioServiceOutOfProcess","--disable-hang-monitor","--disable-ipc-flooding-protection","--disable-notifications","--disable-offer-store-unmasked-wallet-cards","--disable-popup-blocking","--disable-print-preview","--disable-prompt-on-repost","--disable-renderer-backgrounding","--disable-session-crashed-bubble","--disable-setuid-sandbox","--disable-speech-api","--disable-sync","--hide-crash-restore-bubble","--hide-scrollbars","--ignore-gpu-blacklist","--metrics-recording-only","--mute-audio","--no-default-browser-check","--no-first-run","--no-pings","--no-sandbox","--no-zygote","--password-store=basic","--use-mock-keychain"],Y=b.fileURLToPath(new URL(".","undefined"==typeof document?require("url").pathToFileURL(__filename).href:v&&v.src||new URL("index.cjs",document.baseURI).href)),Q=e.readFileSync(Y+"/../templates/template.html","utf8");let Z;const ee=async e=>{await e.setContent(Q),await e.addScriptTag({path:Y+"/../.cache/sources.js"}),await e.evaluate((()=>window.setupHighcharts())),e.on("pageerror",(async t=>{R(1,"[page error]",t),await e.$eval("#container",((e,t)=>{window._displayErrors&&(e.innerHTML=t)}),`<h1>Chart input data error</h1>${t.toString()}`)}))},te=async()=>{if(!Z)return!1;const e=await Z.newPage();return await e.setCacheEnabled(!1),await ee(e),e},re=async(e,t=!1)=>{try{t?(await e.goto("about:blank"),await ee(e)):await e.$eval("body",(e=>e.innerHTML='<div id="chart-container"><div id="container"></div></div>'))}catch(e){R(3,"[browser] Could not clear page")}},oe=async()=>{Z.connected&&await Z.close()};const ie=b.fileURLToPath(new URL(".","undefined"==typeof document?require("url").pathToFileURL(__filename).href:v&&v.src||new URL("index.cjs",document.baseURI).href)),ne=async(e,t,r)=>await e.evaluate(((e,t)=>window.triggerExport(e,t)),t,r);var se=async(r,o,i)=>{const n=[],s=async e=>{for(const e of n)await e.dispose();await e.evaluate((()=>{const[,...e]=document.getElementsByTagName("script"),[,...t]=document.getElementsByTagName("style"),[...r]=document.getElementsByTagName("link");for(const o of[...e,...t,...r])o.remove()}))};try{const a=()=>{};R(4,"[export] Determining export path.");const l=i.export;await r.evaluate((()=>requestAnimationFrame((()=>{}))));const c=l?.options?.chart?.displayErrors&&J().activeManifest.modules.debugger;await r.evaluate((e=>window._displayErrors=e),c);const p=()=>{};let d;if(o.indexOf&&(o.indexOf("<svg")>=0||o.indexOf("<?xml")>=0)){if(R(4,"[export] Treating as SVG."),"svg"===l.type)return o;d=!0;const e=()=>{};await r.setContent((e=>`\n<!DOCTYPE html>\n<html lang='en-US'>\n  <head>\n    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n    <title>Highcarts Export</title>\n  </head>\n  <style>\n    \n\nhtml, body {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n#table-div, #sliders, #datatable, #controls, .ld-row {\n  display: none;\n  height: 0;\n}\n\n#chart-container {\n  box-sizing: border-box;\n  margin: 0;\n  overflow: auto;\n  font-size: 0;\n}\n\n#chart-container > figure, div {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n\n\n  </style>\n  <body>\n    <div id="chart-container">\n      ${e}\n    </div>\n  </body>\n</html>\n\n`)(o)),e()}else if(R(4,"[export] Treating as config."),l.strInj){const e=()=>{};await ne(r,{chart:{height:l.height,width:l.width}},i),e()}else{o.chart.height=l.height,o.chart.width=l.width;const e=()=>{};await ne(r,o,i),e()}p();const u=()=>{},h=i.customCode.resources;if(h){if(h.js&&n.push(await r.addScriptTag({content:h.js})),h.files)for(const t of h.files)try{const o=!t.startsWith("http");n.push(await r.addScriptTag(o?{content:e.readFileSync(t,"utf8")}:{url:t}))}catch(e){R(4,"[export] JS file not found.")}const o=()=>{};if(h.css){let e=h.css.match(/@import\s*([^;]*);/g);if(e)for(let o of e)o&&(o=o.replace("url(","").replace("@import","").replace(/"/g,"").replace(/'/g,"").replace(/;/,"").replace(/\)/g,"").trim(),o.startsWith("http")?n.push(await r.addStyleTag({url:o})):i.customCode.allowFileResources&&n.push(await r.addStyleTag({path:t.join(ie,o)})));n.push(await r.addStyleTag({content:h.css.replace(/@import\s*([^;]*);/g,"")||" "}))}o()}u();const g=d?await r.$eval("#chart-container svg:first-of-type",(async(e,t)=>({chartHeight:e.height.baseVal.value*t,chartWidth:e.width.baseVal.value*t})),parseFloat(l.scale)):await r.evaluate((async()=>{const{chartHeight:e,chartWidth:t}=window.Highcharts.charts[0];return{chartHeight:e,chartWidth:t}})),m=()=>{},f=Math.ceil(g?.chartHeight||l.height),v=Math.ceil(g?.chartWidth||l.width);await r.setViewport({height:f,width:v,deviceScaleFactor:d?1:parseFloat(l.scale)});const y=d?e=>{document.body.style.zoom=e,document.body.style.margin="0px"}:()=>{document.body.style.zoom=1};await r.evaluate(y,parseFloat(l.scale));const{height:b,width:w,x:T,y:x}=await(e=>e.$eval("#chart-container",(e=>{const{x:t,y:r,width:o,height:i}=e.getBoundingClientRect();return{x:t,y:r,width:o,height:Math.trunc(i>1?i:500)}})))(r);let k;d||await r.setViewport({width:Math.round(w),height:Math.round(b),deviceScaleFactor:parseFloat(l.scale)}),m();const S=()=>{};if("svg"===l.type)k=await(async e=>await e.$eval("#container svg:first-of-type",(e=>e.outerHTML)))(r);else if("png"===l.type||"jpeg"===l.type)k=await(async(e,t,r,o,i)=>Promise.race([e.screenshot({type:t,encoding:r,clip:o,omitBackground:"png"==t}),new Promise(((e,t)=>setTimeout((()=>t(new Error("Rasterization timeout"))),i||1500)))]))(r,l.type,"base64",{width:v,height:f,x:T,y:x},l.rasterizationTimeout);else{if("pdf"!==l.type)throw`Unsupported output format ${l.type}`;k=await(async(e,t,r,o)=>await e.pdf({height:t+1,width:r,encoding:o}))(r,f,v,"base64")}return await r.evaluate((()=>{if("undefined"!=typeof Highcharts){const e=Highcharts.charts;if(Array.isArray(e)&&e.length)for(const t of e)t&&t.destroy(),Highcharts.charts.shift()}})),S(),a(),await s(r),k}catch(e){return await s(r),R(1,`[export] Error encountered during export: ${e}`),e}};let ae,le=0,ce=0,pe=0,de=0,ue=0,he={},ge=!1;const me={create:async()=>{const e=u.v4();let t=!1;const r=(new Date).getTime();try{if(t=await te(),!t||t.isClosed())throw"[pool] Invalid page";R(3,`[pool] Successfully created a worker ${e} - took ${(new Date).getTime()-r} ms.`)}catch(e){throw R(1,`[pool] Error creating a new page in pool entry creation! ${e}`),"Error creating page"}return{id:e,page:t,workCount:Math.round(Math.random()*(he.workLimit/2))}},validate:async e=>he.workLimit&&++e.workCount>he.workLimit?(R(3,"[pool] Worker failed validation:",`exceeded work limit (limit is ${he.workLimit})`),!1):(await re(e.page,!0),!0),destroy:e=>{R(3,`[pool] Destroying pool entry ${e.id}.`),e.page&&e.page.close()},log:(e,t)=>console.log(`${t}: ${e}`)},fe=async e=>{ae=e.puppeteerArgs;try{await(async e=>{const t=[...B,...e||[]];if(!Z){let e=0;const r=async()=>{try{R(3,"[browser] attempting to get a browser instance (try",e+")"),Z=await g.launch({headless:"new",args:t,userDataDir:"./tmp/"})}catch(t){R(0,"[browser]",t),++e<25?(R(3,"[browser] failed:",t),await new Promise((e=>setTimeout(e,4e3))),await r()):R(0,"Max retries reached")}};try{await r()}catch(e){return R(0,"[browser] Unable to open browser"),!1}if(!Z)return R(0,"[browser] Unable to open browser"),!1}return Z})(ae)}catch(e){R(0,"[pool|browser]",e)}if(he=e&&e.pool?{...e.pool}:{},R(3,"[pool] Initializing pool:",`min ${he.minWorkers}, max ${he.maxWorkers}.`),ge)return R(4,"[pool] Already initialized, please kill it before creating a new one.");he.listenToProcessExits&&(R(4,"[pool] Attaching exit listeners to the process."),process.on("exit",(async()=>{await ve()})),process.on("SIGINT",((e,t)=>{R(4,`The ${e} event with code: ${t}.`),process.exit(1)})),process.on("SIGTERM",((e,t)=>{R(4,`The ${e} event with code: ${t}.`),process.exit(1)})),process.on("uncaughtException",(async(e,t)=>{R(4,`The ${t} error, message: ${e.message}.`)}))),parseInt(he.minWorkers)>parseInt(he.maxWorkers)&&(he.minWorkers=he.maxWorkers);try{ge=new h.Pool({...me,min:parseInt(he.minWorkers),max:parseInt(he.maxWorkers),acquireTimeoutMillis:he.acquireTimeout,createTimeoutMillis:he.createTimeout,destroyTimeoutMillis:he.destroyTimeout,idleTimeoutMillis:he.idleTimeout,createRetryIntervalMillis:he.createRetryInterval,reapIntervalMillis:he.reaperInterval,propagateCreateError:!1}),ge.on("createFail",((e,t)=>{R(1,`[pool] Error when creating worker of an event id ${e}:`,t)})),ge.on("acquireFail",((e,t)=>{R(1,`[pool] Error when acquiring worker of an event id ${e}:`,t)})),ge.on("destroyFail",((e,t,r)=>{R(1,`[pool] Error when destroying worker of an id ${t.id}, event id ${e}:`,r)})),ge.on("release",(async e=>{await re(e.page,!1),R(4,`[pool] Releasing a worker of an id ${e.id}`)})),ge.on("destroySuccess",((e,t)=>{R(4,`[pool] Destroyed a worker of an id ${t.id}`)}));const e=[];for(let t=0;t<he.minWorkers;t++)try{const t=await ge.acquire().promise;e.push(t)}catch(e){R(1,`[pool] Couldn't create an initial resource ${e}`)}e.forEach((e=>{ge.release(e)})),R(3,`[pool] The pool is ready with ${he.minWorkers} initial resources waiting.`)}catch(e){throw R(1,`[pool] Couldn't create the worker pool ${e}`),e}};async function ve(){return R(3,"[pool] Killing all workers."),ge.destroyed?(await oe(),!0):(await ge.destroy(),await oe(),!0)}const ye=async(e,t)=>{let r;const o=e=>{throw++de,r&&ge.release(r),"In pool.postWork: "+e};if(R(4,"[pool] Work received, starting to process."),he.benchmarking&&be(),++ce,!ge)return R(1,"[pool] Work received, but pool has not been started."),o("Pool is not inited but work was posted to it!");try{R(4,"[pool] Acquiring worker"),r=await ge.acquire().promise}catch(e){return o(`[pool] Error when acquiring available entry: ${e}`)}if(R(4,"[pool] Acquired worker handle"),!r.page)return o("Resolved worker page is invalid: pool setup is wonky");try{let i=(new Date).getTime();R(4,`[pool] Starting work on pool entry ${r.id}.`);const n=await se(r.page,e,t);if(n instanceof Error)return"Rasterization timeout"===n.message&&(r.page.close(),r.page=await te()),o(n);ge.release(r);const s=(new Date).getTime()-i;return pe+=s,ue=pe/++le,R(4,`[pool] Work completed in ${s} ms.`),{data:n,options:t}}catch(e){o(`Error trying to perform puppeteer export: ${e}.`)}};function be(){const{min:e,max:t,size:r,available:o,borrowed:i,pending:n,spareResourceCapacity:s}=ge;R(4,`[pool] The minimum number of resources allowed by pool: ${e}.`),R(4,`[pool] The maximum number of resources allowed by pool: ${t}.`),R(4,`[pool] The number of all resources in pool (free or in use): ${r}.`),R(4,`[pool] The number of resources that are currently available: ${o}.`),R(4,`[pool] The number of resources that are currently acquired: ${i}.`),R(4,`[pool] The number of callers waiting to acquire a resource: ${n}.`),R(4,`[pool] The number of how many more resources can the pool manage/create: ${s}.`)}var we=()=>({min:ge.min,max:ge.max,size:ge.size,available:ge.available,borrowed:ge.borrowed,pending:ge.pending,spareResourceCapacity:ge.spareResourceCapacity}),Te=()=>ce,xe=()=>de,ke=()=>ue,Se=()=>le;const Re=JSON.parse(e.readFileSync(t.join(H,"package.json"))),He=new Date;let Ee={};const Le=()=>Ee,Oe=(e,t,r=[])=>{const o=_(e);for(const[e,n]of Object.entries(t))o[e]="object"!=typeof(i=n)||Array.isArray(i)||null===i||r.includes(e)||void 0===o[e]?void 0!==n?n:o[e]:Oe(o[e],n,r);var i;return o};function Ce(e,t={},r=""){Object.keys(e).forEach((o=>{const i=e[o],n=t&&t[o];let s;void 0===i.value?Ce(i,n,`${r}.${o}`):(void 0!==n&&(i.value=n),i.envLink&&("boolean"===i.type?i.value=$([process.env[i.envLink],i.value].find((e=>e||"false"===e))):"number"===i.type?(s=+process.env[i.envLink],i.value=s>=0?s:i.value):i.type.indexOf("]")>=0&&process.env[i.envLink]?i.value=process.env[i.envLink].split(","):i.value=process.env[i.envLink]||i.value))}))}function _e(e){let t={};for(const[r,o]of Object.entries(e))t[r]=Object.prototype.hasOwnProperty.call(o,"value")?o.value:_e(o);return t}let Ie=!1;const Ae=async(t,r)=>{R(4,"[chart] Starting exporting process.");const o=((e,t={})=>{let r={};return e.svg?(r=_(t),r.export.type=e.type||e.export.type,r.export.scale=e.scale||e.export.scale,r.export.outfile=e.outfile||e.export.outfile,r.payload={svg:e.svg}):r=Oe(t,e,T),r.export.outfile=r.export?.outfile||`chart.${r.export?.type||"png"}`,r})(t,Le()),i=o.export;return o.payload?.svg&&""!==o.payload.svg?Ne(o.payload.svg.trim(),o,r):i.infile&&i.infile.length?(R(4,"[chart] Attempting to export from an input file."),e.readFile(i.infile,"utf8",((e,t)=>e?R(1,`[chart] Error loading input file: ${e}.`):(o.export.instr=t,Ne(o.export.instr.trim(),o,r))))):i.instr&&""!==i.instr||i.options&&""!==i.options?(R(4,"[chart] Attempting to export from a raw input."),$(o.customCode?.allowCodeExecution)?Pe(o,r):"string"==typeof i.instr?Ne(i.instr.trim(),o,r):je(o,i.instr||i.options,r)):(R(1,E(`[chart] No input specified.\n      ${JSON.stringify(i,void 0,"  ")}.`)),r&&r(!1,{error:!0,message:"No input specified."}))},$e=e=>{const{chart:t,exporting:r}=e.export?.options||C(e.export?.instr),o=C(e.export?.globalOptions);let i=e.export?.scale||r?.scale||o?.exporting?.scale||e.export?.defaultScale||1;i=Math.max(.1,Math.min(i,5)),i=((e,t=1)=>{const r=Math.pow(10,t||0);return Math.round(+e*r)/r})(i,2);const n={height:e.export?.height||r?.sourceHeight||t?.height||o?.exporting?.sourceHeight||o?.chart?.height||e.export?.defaultHeight||400,width:e.export?.width||r?.sourceWidth||t?.width||o?.exporting?.sourceWidth||o?.chart?.width||e.export?.defaultWidth||600,scale:i};for(var[s,a]of Object.entries(n))n[s]="string"==typeof a?+a.replace(/px|%/gi,""):a;return n},je=(t,r,o,i)=>{let{export:n,customCode:s}=t;const a="boolean"==typeof s.allowCodeExecution?s.allowCodeExecution:Ie;if(s){if(a)if("string"==typeof t.customCode.resources)t.customCode.resources=O(t.customCode.resources,$(t.customCode.allowFileResources));else if(!t.customCode.resources)try{const r=e.readFileSync("resources.json","utf8");t.customCode.resources=O(r,$(t.customCode.allowFileResources))}catch(e){R(3,"[chart] The default resources.json file not found.")}}else s=t.customCode={};if(!a&&s){if(s.callback||s.resources||s.customCode)return o&&o(!1,{error:!0,message:E("The callback, resources and customCode have been disabled for this\n            server.")});s.callback=!1,s.resources=!1,s.customCode=!1}if(r&&(r.chart=r.chart||{},r.exporting=r.exporting||{},r.exporting.enabled=!1),n.constr=n.constr||"chart",n.type=L(n.type,n.outfile),"svg"===n.type&&(n.width=!1),["globalOptions","themeOptions"].forEach((t=>{try{n&&n[t]&&("string"==typeof n[t]&&n[t].endsWith(".json")?n[t]=C(e.readFileSync(n[t],"utf8"),!0):n[t]=C(n[t],!0))}catch(e){n[t]={},R(1,`[chart] The ${t} not found.`)}})),s.allowCodeExecution&&(s.customCode=j(s.customCode,s.allowFileResources)),s&&s.callback&&s.callback?.indexOf("{")<0)if(s.allowFileResources)try{s.callback=e.readFileSync(s.callback,"utf8")}catch(e){R(2,`[chart] Error loading callback: ${e}.`),s.callback=!1}else s.callback=!1;t.export={...t.export,...$e(t)},ye(n.strInj||r||i,t).then((e=>o(e))).catch((e=>(R(0,"[chart] When posting work:",e),o(!1,e))))},Pe=(e,t)=>{try{let r,o=e.export.instr||e.export.options;return"string"!=typeof o&&(r=o=I(o,e.customCode?.allowCodeExecution)),r=o.replaceAll(/\t|\n|\r/g,"").trim(),";"===r[r.length-1]&&(r=r.substring(0,r.length-1)),e.export.strInj=r,je(e,!1,t)}catch(r){const o=E(`Malformed input detected for ${e.export?.requestId||"?"}:\n      Please make sure that your JSON/JavaScript options\n      are sent using the "options" attribute, and that if you're using\n      SVG, it is unescaped.`);return R(1,o),t&&t(!1,JSON.stringify({error:!0,message:o}))}},Ne=(e,t,r)=>{const{allowCodeExecution:o}=t.customCode;if(e.indexOf("<svg")>=0||e.indexOf("<?xml")>=0)return R(4,"[chart] Parsing input as SVG."),je(t,!1,r,e);try{const o=JSON.parse(e.replaceAll(/\t|\n|\r/g," "));return je(t,o,r)}catch(e){return $(o)?Pe(t,r):r&&r(!1,{error:!0,message:E("Only JSON configurations and SVG is allowed for this server. If\n            this is your server, JavaScript exporting can be enabled by starting\n            the server with the --allowCodeExecution flag.")})}},Fe={png:"image/png",jpeg:"image/jpeg",gif:"image/gif",pdf:"application/pdf",svg:"image/svg+xml"};let Ue=0;const qe=[],Ge=[],We=(e,t,r,o)=>{let i=!0;const{id:n,uniqueId:s,type:a,body:l}=o;return e.some((e=>{if(e){let o=e(t,r,n,s,a,l);return void 0!==o&&!0!==o&&(i=o),!0}})),i},Me=(e,t)=>{(()=>{const e=process.hrtime.bigint()})();const r=Le(),o=e.body,i=++Ue,n=u.v4().replace(/-/g,"");let s=L(o.type);if(!o)return t.status(400).send(E("Body is required. Sending a body? Make sure your Content-type header\n        is correct. Accepted is application/json and multipart/form-data."));let a=C(o.infile||o.options||o.data);if(!a&&!o.svg)return R(2,E(`Request ${n} from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Check your payload.`)),t.status(400).send(E("No correct chart data found. Please make sure you are using\n        application/json or multipart/form-data headers, and that the chart\n        data is in the 'infile', 'options' or 'data' attribute if sending\n        JSON or in the 'svg' if sending SVG."));let l=!1;if(l=We(qe,e,t,{id:i,uniqueId:n,type:s,body:o}),!0!==l)return t.send(l);let c=!1;e.socket.on("close",(()=>{c=!0})),R(4,`[export] Got an incoming HTTP request ${n}.`),o.constr="string"==typeof o.constr&&o.constr||"chart";const p={export:{instr:a,type:s,constr:o.constr[0].toLowerCase()+o.constr.substr(1),height:o.height,width:o.width,scale:o.scale||r.export.scale,globalOptions:C(o.globalOptions,!0),themeOptions:C(o.themeOptions,!0)},customCode:{allowCodeExecution:Ie,allowFileResources:!1,resources:C(o.resources,!0),callback:o.callback,customCode:o.customCode}};a&&(p.export.instr=I(a,p.customCode.allowCodeExecution));const d=Oe(r,p);if(d.export.options=a,d.payload={svg:o.svg||!1,b64:o.b64||!1,dataOptions:C(o.dataOptions,!0),noDownload:o.noDownload||!1,requestId:n},o.svg&&(h=d.payload.svg,["localhost","(10).(.*).(.*).(.*)","(127).(.*).(.*).(.*)","(172).(1[6-9]|2[0-9]|3[0-1]).(.*).(.*)","(192).(168).(.*).(.*)"].some((e=>h.match(`xlink:href="(?:(http://|https://))?${e}`)))))return t.status(400).send("SVG potentially contain at least one forbidden URL in xlink:href element.");var h;Ae(d,((r,a)=>(e.socket.removeAllListeners("close"),c?R(3,E("[export] The client closed the connection before the chart was done\n          processing.")):a?(R(1,E(`[export] Work: ${n} could not be completed, sending:\n          ${a}`)),t.status(400).send(a.message)):r&&r.data?(s=r.options.export.type,We(Ge,e,t,{id:i,body:r.data}),r.data?o.b64?"pdf"===s||"svg"==s?t.send(Buffer.from(r.data,"utf8").toString("base64")):t.send(r.data):(t.header("Content-Type",Fe[s]||"image/png"),o.noDownload||t.attachment(`${e.params.filename||e.body.filename||"chart"}.${s||"png"}`),"svg"===s?t.send(r.data):t.send(Buffer.from(r.data,"base64"))):void 0):(R(1,E(`[export] Unexpected return from chart generation, please check your\n          data Request: ${n} is ${r.data}.`)),t.status(400).send("Unexpected return from chart generation, please check your data.")))))};const De=i();De.disable("x-powered-by"),De.use(o());const Ve=n.memoryStorage(),Je=n({storage:Ve,limits:{fieldsSize:"50MB"}});De.use(Je.any()),De.use(r.json({limit:"50mb"})),De.use(r.urlencoded({extended:!0,limit:"50mb"})),De.use(r.urlencoded({extended:!1,limit:"50mb"}));const ze=e=>R(1,`[server] Socket error: ${e}`),Xe=e=>{e.on("clientError",ze),e.on("error",ze),e.on("connection",(e=>e.on("error",(e=>ze(e)))))},Ke=async r=>{if(!r.enable)return!1;if(!r.ssl.enable&&!r.ssl.force){const e=s.createServer(De);Xe(e),e.listen(r.port,r.host),R(3,`[server] Started HTTP server on ${r.host}:${r.port}.`)}if(r.ssl.enable){let o,i;try{o=await e.promises.readFile(t.posix.join(r.ssl.certPath,"server.key"),"utf8"),i=await e.promises.readFile(t.posix.join(r.ssl.certPath,"server.crt"),"utf8")}catch(e){R(1,`[server] Unable to load key/certificate from ${r.ssl.certPath}.`)}if(o&&i){const e=a.createServer(De);Xe(e),e.listen(r.ssl.port,r.host),R(3,`[server] Started HTTPS server on ${r.host}:${r.ssl.port}.`)}}r.rateLimiting&&r.rateLimiting.enable&&![0,NaN].includes(r.rateLimiting.maxRequests)&&P(De,r.rateLimiting),De.use(i.static(t.posix.join(H,"public"))),(e=>{!!e&&e.get("/health",((e,t)=>{t.send({status:"OK",bootTime:He,uptime:Math.floor(((new Date).getTime()-He.getTime())/1e3/60)+" minutes",version:Re.version,highchartsVersion:z(),averageProcessingTime:ke(),performedExports:Se(),failedExports:xe(),exportAttempts:Te(),sucessRatio:Se()/Te()*100,pool:we()})}))})(De),(e=>{e.post("/",Me),e.post("/:filename",Me)})(De),(e=>{!!e&&e.get("/",((e,r)=>{r.sendFile(t.join(H,"public","index.html"))}))})(De),(e=>{!!e&&e.post("/change_hc_version/:newVersion",(async(e,t)=>{const r=process.env.HIGHCHARTS_ADMIN_TOKEN;if(!r||!r.length)return t.send({error:!0,message:"Server not configured to do run-time version changes: HIGHCHARTS_ADMIN_TOKEN not set"});const o=e.get("hc-auth");if(!o||o!==r)return t.send({error:!0,message:"Invalid or missing token: set token in the hc-auth header"});const i=e.params.newVersion;if(i){try{await V(i)}catch(e){t.send({error:!0,message:e})}t.send({version:z()})}else t.send({error:!0,message:"No new version supplied"})}))})(De)};var Be={startServer:Ke,getExpress:()=>i,getApp:()=>De,use:(e,...t)=>{De.use(e,...t)},get:(e,...t)=>{De.get(e,...t)},post:(e,...t)=>{De.post(e,...t)},enableRateLimiting:e=>P(De,e)},Ye={log:R,mapToNewConfig:e=>{const t={};for(const[r,o]of Object.entries(e)){const e=x[r]?x[r].split("."):[];e.reduce(((t,r,i)=>t[r]=e.length-1===i?o:t[r]||{}),t)}return t},setOptions:(t,r)=>(r?.length&&(Ee=function(t){const r=t.findIndex((e=>"loadConfig"===e.replace(/-/g,"")));if(r>-1&&t[r+1]){const o=t[r+1];try{if(o&&o.endsWith(".json"))return JSON.parse(e.readFileSync(o))}catch(e){R(1,`[config] Unable to load config from the ${o}: ${e}`)}}return{}}(r)),Ce(w,Ee),Ee=_e(w),t&&(Ee=Oe(Ee,t,T)),r?.length&&(Ee=function(e,t,r){for(let r=0;r<t.length;r++){let o=t[r].replace(/-/g,"");const i=x[o]?x[o].split("."):[];i.reduce(((n,s,a)=>(i.length-1===a&&void 0!==n[s]&&(t[++r]?n[s]=t[r]||n[s]:(console.log(`Missing argument value for ${o}!`.red,"\n"),e=A())),n[s])),e)}return e}(Ee,r)),Ee),singleExport:t=>{t.export.instr=t.export.instr||t.export.options,Ae(t,((t,r)=>{r&&(R(1,`[cli] ${r.message}`),process.exit(1));const{outfile:o,type:i}=t.options.export;e.writeFileSync(o||`chart.${i}`,"svg"!==i?Buffer.from(t.data,"base64"):t.data),ve()}))},startExport:Ae,batchExport:t=>{const r=[];for(let o of t.export.batch.split(";"))o=o.split("="),2===o.length&&r.push(new Promise(((r,i)=>{Ae({...t,export:{...t.export,infile:o[0],outfile:o[1]}},((t,o)=>{if(o)return i(o);e.writeFileSync(t.options.export.outfile,Buffer.from(t.data,"base64")),r()}))})));Promise.all(r).then((()=>{ve()})).catch((e=>{R(1,`[chart] Error encountered during batch export: ${e}`),ve()}))},server:Be,startServer:Ke,killPool:ve,initPool:async(e={})=>{var t,r;return t=e.customCode&&e.customCode.allowCodeExecution,Ie=$(t),(r=e.logging&&parseInt(e.logging.level))>=0&&r<=S.levelsDesc.length&&(S.level=r),e.logging&&e.logging.dest&&((e,t)=>{if(S={...S,dest:e||S.dest,file:t||S.file,toFile:!0},0===S.dest.length)return R(1,"[logger] File logging init: no path supplied.");S.dest.endsWith("/")||(S.dest+="/")})(e.logging.dest,e.logging.file||"highcharts-export-server.log"),await D(e.highcharts||{version:"latest"}),await fe({pool:e.pool||{minWorkers:1,maxWorkers:1},puppeteerArgs:e.puppeteer?.args||[]}),e}};module.exports=Ye;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
